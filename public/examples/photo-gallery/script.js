var photos = [
  'gallery/laptop-large.jpg',
  'gallery/microphone-large.jpg',
  'gallery/keyboard-large.jpg',
  'gallery/signboard-large.jpg',
  'gallery/tree-large.jpg'
];

var thumbnails = document.querySelectorAll('.gallery__photo-preview');
var fullPhoto = document.querySelector('.full-photo');

var addThumbnailClickHandler = function (thumbnail, photo) {
  thumbnail.addEventListener('click', function () {
    fullPhoto.src = photo;
  });
};

for (var i = 0; i < thumbnails.length; i++) {
  addThumbnailClickHandler(thumbnails[i], photos[i]);
}

/*
Нужно запрограммировать галерею с моими фотографиями для сайта нашей веб-студии. 

Галерея состоит из нескольких миниатюр (элементы с классом gallery__photo-preview) и большой фотографии (класс full-photo). По клику на миниатюру должно меняться большое изображение. Большая картинка должна соответствовать превью, по которой кликнул пользователь.

Данные для изображений собраны в массив photos. Каждый элемент массива — путь до полноразмерной фотографии. Порядок элементов в этом массиве такой же, как и порядок миниатюр в разметке.

Верстальщик уже всё подготовил: изображения превью лежат внутри кнопок с классом gallery__photo-preview, клики именно по этим кнопкам будут менять содержимое большого изображения (класс full-photo). От нас, как обычно, требуется запрограммировать взаимодействие интерфейса с пользователем.

Сначала мы найдём все миниатюры с помощью querySelectorAll и большое изображение через querySelector, запишем найденные элементы в переменные.

Мы нашли все изображения на странице, теперь можно программировать логику. Взаимодействие должно быть таким: пользователь кликает по превью → меняется большая картинка.

Первым делом нужно добавить обработчики клика на каждую миниатюру. Все миниатюры хранятся в коллекции thumbnails. Мы можем перебрать эту коллекцию в цикле, добавляя обработчик клика на текущий элемент коллекции. Так мы добавим обработчик на каждую миниатюру.

Внутри обработчика выведем строку в консоль, а затем попробуем кликнуть по миниатюрам. Так мы убедимся, что обработчики срабатывают.

Обработчики клика добавили, убедились, что всё работает. Как заставить большую картинку меняться по кликам пользователя?

У изображений есть атрибут src, которым можно управлять из JavaScript. Мы уже говорили об этом раньше.

Чтобы изображение элемента с классом full-photo (переменная fullPhoto) менялось, должно измениться значение src этого элемента.

У нас есть массив с данными photos. Все превью находятся в коллекции thumbnails. Получается, элементы массива photos подходят элементам из коллекции thumbnails с тем же индексом.

Например, пользователь кликнул по самой первой миниатюре в разметке. Она же thumbnails[0] в коллекции. Тогда в большой картинке должно появиться изображение с адресом photos[0]. Получается такой код:

thumbnails[0].addEventListener('click', function () {
  fullPhoto.src = photos[0];
});
Добавим код внутрь обработчика. Будем подставлять в атрибут src значение элемента из массива photos. Индексы миниатюры и элемента с адресом картинки будут совпадать.

Обработчики, которые мы создали, используют значение счётчика i. Сложность в том, что обработчики срабатывают не сразу, а в момент наступления события. К тому моменту, когда первое событие клика выполняется, цикл полностью отработал, значение счётчика стало максимальным — 5, и функция-обработчик берёт именно это значение. Цикл не создаёт отдельную область видимости, это ведь не функция. Поэтому значение i находится в глобальной области и каждый обработчик обращается к этому значению 5. А у нас нет миниатюры с таким индексом и элемента в массиве photos, поэтому никакая картинка и не подставляется.

Как нам это исправить? Нам помогут замыкания!

Мы создадим функцию, которая будет принимать в качестве параметров миниатюру и подходящий элемент из массива photos. А уже внутри этой функции будем добавлять обработчики. Тогда каждый обработчик будет брать значения из своего замыкания — из параметров функции, в которой находится обработчик.

У каждого обработчика будет собственное замыкание, поэтому значения в обработчиках не будут повторяться, как это было раньше.

На каждой итерации мы передаём разные значения в addThumbnailClickHandler. Каждый обработчик получает своё замыкание, в котором находятся какие-то конкретные значения параметров thumbnail, photo. Именно эти значения использует каждый обработчик при происхождении события. И теперь значение индекса в уже отработавшем цикле никак не влияет на нашу программу.
*/