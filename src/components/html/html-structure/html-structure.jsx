import React from 'react';

function HtmlStructure() {

  return (
    <section className="conspect">
      <h1>Структура HTML-документа</h1>
      <p>Каждый HTML-документ начинается с декларации типа документа или «доктайпа». Тип документа необходим, чтобы браузер мог определить версию HTML и правильно отобразить страницу.</p>
      <p><span className="hl-1">&lt;!DOCTYPE html&gt;</span></p>
      <p>Задаём язык для всего документа:</p>
      <p><span className="hl-2">&lt;html lang=&quot;ru&quot;&gt;</span></p>
      <p>Атрибут <span className="hl-10">lang</span> - помогает определить язык элемента. Можно использовать не только для HTML, но и для тегов.</p>
      <p>Простейшая HTML-страница состоит как минимум из трёх тегов: <span className="hl-3">&lt;html&gt;, &lt;head&gt; и &lt;body&gt;</span></p>
      <p>Тег &lt;head&gt; обычно содержит заголовок, ключевые слова, описание страницы и другие служебные данные. Также внутри него подключаются внешние ресурсы, например, стили. Содержимое этого тега не отображается на странице напрямую.</p>
      <p>А в теге &lt;body&gt; хранится содержание страницы, которое отображается в окне браузера. Для подключения стилей к странице существует тег &lt;link&gt;. Для этого у него есть атрибут href в котором задаётся адрес стилевого файла, а значение stylesheet атрибута rel говорит браузеру, что мы подключаем именно стили, а не что-то другое.</p>
      <p>Ещё один элемент, который располагается в &lt;head&gt; — это тег &lt;title&gt; . В нём задаётся заголовок страницы, который отображается во вкладках браузера. По заголовку должно быть понятно, о чём эта страница, даже когда она не открыта в браузере, а отображается в результатах поиска или в браузерных закладках.</p>
      <p>Ещё один важный тег, располагающийся внутри &lt;head&gt; это тег &lt;meta&gt;. Он одиночный, то есть не требует парный закрывающий тег в конце. С помощью &lt;meta&gt; можно сообщать браузеру, поисковому роботу или другому устройству различную служебную информацию (или метаинформацию) о вашем сайте: кодировку текста, описание контента и т.д. Для этого используются теги &lt;meta&gt; с разными атрибутами и их значениями.</p>
      <p>Кодировка текста HTML-страницы указывается с помощью атрибута charset: &lt;meta charset=&quot;название кодировки&quot;&gt;</p>
      <p>Самая распространённая современная кодировка — utf-8. Перечень ключевых слов задаётся тегом &lt;meta&gt;, у которого атрибут name имеет значение keywords. Ключевые слова (самые важные слова из содержания страницы) перечисляются в атрибуте content через запятую: &lt;meta name=&quot;keywords&quot; content=&quot;важные, ключевые, слова&quot;&gt;</p>
      <p>Краткое описание (или аннотация) страницы задаётся похожим образом, только значение атрибута name меняется на description: &lt;meta name=&quot;description&quot; content=&quot;краткое описание&quot;&gt; &lt;meta&gt;, &lt;link&gt;, &lt;title&gt; и другие теги, включаемые в &lt;head&gt;, имеют особый тип содержимого — метасодержимое. Они не отображаются на странице напрямую, а служат для хранения информации о документе и для взаимосвязи документа с другими документами и системами.</p>
      <p>Внутри &lt;body&gt; находятся те теги, которые отображаются на странице. Например, тег &lt;main&gt; выделяет основное содержание страницы, которое не повторяется на других страницах. Спецификация не допускает использование на одной странице более одного тега &lt;main&gt;, если у них нет специального атрибута hidden. Этот атрибут добавляется HTML-элементу, например, в одностраничных приложениях (Single Page Application), чтобы менять содержимое страницы, делая видимым тот или иной &lt;main&gt; в разных состояниях приложения. Атрибут hidden указывает браузеру, что элемент не должен отображаться и использоваться в момент, когда отображается и используется содержимое другого &lt;main&gt;. Тег &lt;header&gt; содержит вводную часть страницы, которую чаще называют «шапкой», а тег &lt;footer&gt; описывает заключительную часть страницы, или «подвал».</p>
      <p>Тег &lt;header&gt; — это не только шапка сайта с логотипом и меню, он может использоваться, например, и как «шапка» какой-нибудь статьи или раздела сайта. Конечно, в случае со статьёй &lt;header&gt; называют не «шапкой», а вводной частью, в которой могут содержаться заголовки, оглавление и так далее.</p>
      <p>С &lt;footer&gt; ситуация аналогичная. В привычном понимании это подвал сайта, с копирайтами, контактной информацией и так далее. Но &lt;footer&gt; может использоваться и в других разделах сайта. Например, внутри статьи в «подвале» можно разместить дополнительную информацию: данные об авторе, дополнительные ссылки и так далее.</p>
      <p>Существует тег &lt;section&gt;, который обозначает крупный смысловой (или «логический») раздел. Как понять, что раздел смысловой? Если вы можете дать ему имя, описывающее его содержание или назначение, то это точно он.</p>
      <p>Хороший пример использования &lt;section&gt; — разделение книги на главы, ведь название главы описывает её содержание. Также одна глава, без остальных, воспринимается вырванной из контекста. То же самое с контентом главной страницы. Смысловые разделы составляют содержание страницы, но сами по себе, в отрыве от страницы, эти «секции» жить не могут и теряют смысл.</p>
      <p>Небольшая подсказка как отличать смысловые или логические разделы от структурных разделов. Логический раздел вы можете осмысленно назвать одним словом или словосочетанием: «программа обучения», «каталог», «наши преимущества». Если же в голову приходят названия, которые указывают на его положение на странице («шапка», «подвал», «левая колонка»), либо перечисления («новости и галерея», «фильтры и товары»), в таком случае раздел структурный и тег &lt;section&gt; для него не подходит.</p>
      <p>Тег &lt;article&gt;, обозначает цельный, законченный и самостоятельный фрагмент информации. И это тег &lt;article&gt;, который обозначает цельный, законченный и самостоятельный фрагмент информации. А пост в блоге именно такой.</p>
      <p>Тег &lt;article&gt;, в отличие от &lt;section&gt;, можно вырвать из одного места и вставить в другое (на другую страницу сайта или на другой сайт), и смысл содержимого тега при этом не потеряется. Примеры: статья, пост в блоге, сообщение на форуме и так далее.</p>
      <p>Теги &lt;section&gt; можно использовать внутри &lt;article&gt;, если там нужно выделить отдельные смысловые блоки. Точно так же можно использовать &lt;article&gt; внутри &lt;section&gt;, если в логическом разделе документа содержатся независимые контентные блоки.</p>
      <p>Для создания логического раздела с основной навигацией предназначен тег &lt;nav&gt; (сокращение от английского «navigation»). Обычно в &lt;nav&gt; включают ссылки на другие страницы или навигацию по текущей странице. Кроме того, блок &lt;nav&gt; помимо ссылок может включать абзацы с текстом, заголовки, списки и другое содержание.</p>
      <p>Тег &lt;aside&gt; включает в себя дополнительное содержание, не связанное напрямую с основным. Такие блоки ещё часто называют «сайдбарами» или боковыми панелями.</p>
      <p>Для создания основной структуры текста используют заголовки. В HTML существует целое семейство заголовочных тегов: от &lt;h1&gt; до &lt;h6&gt;. Тег &lt;h1&gt; обозначает самый важный заголовок (заголовок верхнего уровня), а тег &lt;h6&gt; обозначает подзаголовок самого нижнего уровня.</p>
      <p>Заголовок &lt;h1&gt; — самый важный на странице. В него нужно включать текст, который в целом описывает содержание страницы. Очень важно, чтобы заголовок первого уровня на странице был только один.На главных страницах заголовок верхнего уровня часто добавляют в шапку сайта.</p>
      <p>В пятой версии HTML разрешили использовать собственную, независимую от остального документа, иерархию заголовков в тегах для создания смысловых разделов. Теперь на странице можно использовать несколько &lt;section&gt; или &lt;article&gt; со своими &lt;h1&gt;, &lt;h2&gt; и &lt;h3&gt;.</p>
      <p>На практике выяснилось, что этот механизм скорее мешает, чем помогает, а браузеры и средства доступности не спешат его реализовывать. Так что все начали возвращаться к старой доброй сквозной иерархии заголовков во всём документе.</p>
      <p>Основную структуру текста создают с помощью заголовков, а более мелкую выстраивают с помощью параграфов (или абзацев). Для разметки параграфов предназначен тег &lt;p&gt;. По умолчанию абзацы начинаются с новой строки и отделяются от остального контента отступами сверху и снизу.</p>
      <p>А тег &lt;p&gt; позволяет лишь явно выделять параграфы, группируя элементы с фразовым типом содержимого. И это могут быть не только блоки текста, а, например, изображения, ссылки или поля ввода.</p>
      <p>Не все теги могут быть включены в &lt;p&gt;. Например, внутри абзаца не могут располагаться крупные структурные теги, заголовки, формы, списки, таблицы. Когда браузер встречает неподходящий тег внутри &lt;p&gt;, он «выбрасывает» этот тег из &lt;p&gt;.</p>
      <p>В стилях для прототипирования мы по-разному оформили теги, которые применяются для решения разных задач. При этом мы опирались на систему типов спецификации HTML. Вот расшифровка:</p>
      <p>Пунктиром выделен особый тег &lt;body&gt;. Синей рамкой выделяются поточные теги, которыми обычно размечают крупные структурные блоки страниц, например &lt;main&gt;.</p>
      <p>Фиолетовой рамкой выделяются теги для создания смысловых разделов, например &lt;section&gt;.</p>
      <p>Оранжевой рамкой выделяются заголовочные теги, например &lt;h1&gt;.</p>
      <p>Розовой рамкой выделяются поточные теги, которыми обычно размечают непосредственно текстовые элементы, например &lt;p&gt;.</p>
      <p>Конечно, в спецификации больше типов, но мы не стали оформлять все, а ограничились только теми тегами, которые понадобятся нам в прототипе.</p>
      <img src="../img/structure-site.png" width="550" height="800" alt="Структура сайта" />
    </section>
  );
}
export default HtmlStructure;
