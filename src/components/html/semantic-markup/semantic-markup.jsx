import React, {useState} from 'react';
import DocumentMeta from 'react-document-meta';
import {Link, animateScroll as scroll} from 'react-scroll';
import AboutDoctype from '../about-doctype/about-doctype';
import UnnecessaryTypeAttributes from '../unnecessary-type-attributes/unnecessary-type-attributes';
import AboutBaseTag from '../about-base-tag/about-base-tag';
import AboutLabel from '../about-label/about-label';

function SemanticMarkup() {
  const meta = {
    title: 'Semantic markup',
  };

  const [state, setState] = useState({
    activeItem: {},
  });

  function toggleActiveItem(value) {
    setState({activeItem: {[value]: true}});
  }

  return (
    <DocumentMeta {...meta}>
      <section className="conspect">
        <h1 onClick={() => scroll.scrollToBottom()}>Методика написания семантической разметки</h1>
        <p>Создание разметки — это проектирование информационной архитектуры страниц, создание каркаса, который должен позволить применить стили и скрипты, а также помочь индексации.</p>

        <h2>Тег noscript</h2>
        <p>Элемент HTML &lt;noscript&gt; определяет секцию html кода, которая будет вставлена, если в браузере пользователя нет либо отключена поддержка JavaScript.</p>

        <h2>Декларация типа документа</h2>
        <p>Перед тем как приступить к разметке, определим !DOCTYPE, укажем язык содержимого, кодировку и заголовок страницы во вкладке браузера.</p>
        <p>Ключевое слово DOCTYPE в файле HTML — это декларация типа документа. Так браузер узнает, на каком языке и с какими технологиями он был создан. Если не укажете DOCTYPE, то ваша страница может отображаться некорректно.</p>
        <pre>{`<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Заголовок страницы</title>
  </head>
  <body>
  </body>
</html>`}
        </pre>
        <p>
          <button className="add-theory-button"
            onClick={() => (state.activeItem['about-doctype']) ? toggleActiveItem('') : toggleActiveItem('about-doctype')}
          ><span className="hl-2">Про DOCTYPE</span>
          </button>
          {(state.activeItem['about-doctype']) && <AboutDoctype />}
        </p>
        <p>
          <button className="add-theory-button"
            onClick={() => (state.activeItem['attr-type']) ? toggleActiveItem('') : toggleActiveItem('attr-type')}
          ><span className="hl-3">НЕНУЖНЫЕ АТРИБУТЫ TYPE</span>
          </button>
          {(state.activeItem['attr-type']) && <UnnecessaryTypeAttributes />}
        </p>
        <p>
          <button className="add-theory-button"
            onClick={() => (state.activeItem['tag-base']) ? toggleActiveItem('') : toggleActiveItem('tag-base')}
          ><span className="hl-4">Про тег base</span>
          </button>
          {(state.activeItem['tag-base']) && <AboutBaseTag />}
        </p>

        <h2>Разметка сайта пошагово:</h2>
        <ul>
          <li>
            <Link
              to="step-1"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Шаг 1. Выделяем крупные смысловые блоки на каждой странице сайта
            </Link>
          </li>
          <li>
            <Link
              to="step-2"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Шаг 2. Размечаем в блоках крупные смысловые разделы
            </Link>
          </li>
          <li>
            <Link
              to="step-3"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Шаг 3. Выделяем заголовок всего документа и заголовки смысловых разделов
            </Link>
          </li>
          <li>
            <Link
              to="step-4"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Шаг 4. Размечаем мелкие элементы в смысловых разделах
            </Link>
            <ul>
              <li>
                <Link
                  to="markup-abbr"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем аббревиатуры
                </Link>
              </li>
              <li>
                <Link
                  to="markup-lists"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем списки
                </Link>
              </li>
              <li>
                <Link
                  to="markup-tables"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем таблицы
                </Link>
              </li>
              <li>
                <Link
                  to="markup-demo"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем демонстрационные материалы
                </Link>
              </li>
              <li>
                <Link
                  to="markup-hyphenations"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем параграфы и переносы
                </Link>
              </li>
              <li>
                <Link
                  to="markup-forms"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем формы
                </Link>
              </li>
              <li>
                <Link
                  to="markup-quotes"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем цитаты
                </Link>
              </li>
              <li>
                <Link
                  to="markup-contacts"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем контактную информацию
                </Link>
              </li>
              <li>
                <Link
                  to="markup-progress"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем прогресс и измерения
                </Link>
              </li>
            </ul>
          </li>
          <li>
            <Link
              to="step-5"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Шаг 5. Размечаем фразовые элементы
            </Link>
            <ul>
              <li>
                <Link
                  to="markup-images"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем изображения
                </Link>
              </li>
              <li>
                <Link
                  to="markup-links"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем ссылки
                </Link>
              </li>
              <li>
                <Link
                  to="markup-buttons"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем кнопки
                </Link>
              </li>
              <li>
                <Link
                  to="markup-video"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем видео-контент
                </Link>
              </li>
              <li>
                <Link
                  to="markup-time"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем время
                </Link>
              </li>
              <li>
                <Link
                  to="markup-text-elements"
                  className="text-link"
                  smooth
                  offset={-20}
                  duration={500}
                >Размечаем мелкие текстовые элементы
                </Link>
              </li>
            </ul>
          </li>
        </ul>
        <h3>Cases</h3>
        <ul className="cases-list">
          <li className="cases-list__item">
            <Link
              to="case-block-link"
              className="text-link"
              smooth
              offset={-20}
              duration={500}
            >Как сделать блок-ссылку
            </Link>
          </li>
        </ul>
        <div className="note">Для лучшей индексации сайта лучше использовать смысловые теги: header, footer, main, section, article и т.д.</div>
        <p><a className="hl-1" href="http://html5doctor.com/element-index/" target="_blank" rel="noopener noreferrer">HTML5 Element Index - удобный справочник по тегам.</a></p>
        <p><a className="hl-2" href="/img/tag-selection.png" target="blank">Открыть схему выбора смысловых тэгов (в новой вкладке)</a></p>
        <p><a className="hl-10" href="https://github.com/yoksel/common-words/" target="_blank" rel="noopener noreferrer">Слова, часто используемые в CSS-классах</a></p>
        <p><a className="hl-9" href="http://yoksel.github.io/easy-markup/bem-rules/" target="_blank" rel="noopener noreferrer">Как писать классы по БЭМ?</a></p>
        <p><a className="hl-8" href="https://ru.bem.info/methodology/quick-start/" target="_blank" rel="noopener noreferrer">Методология БЭМ</a></p>

        <h2 id={'step-1'}>Шаг 1. Выделяем крупные смысловые блоки на каждой странице сайта: <code>&lt;header&gt;</code>, <code>&lt;main&gt;</code> и <code>&lt;footer&gt;</code>.</h2>
        <p>Вспомним назначение каждого из указанных семантических тегов:</p>
        <ul>
          <li><code>&lt;header&gt;</code> — это вводная часть всего документа или одного из его разделов. Вводная часть смыслового раздела или всего сайта, обычно содержит подсказки и навигацию. <span className="hl-1">Особенности: этих элементов может быть несколько на странице (может использоваться и как «шапка» какой-нибудь статьи или раздела сайта).</span><span className="hl-4">Типовые ошибки: использовать только как шапку сайта</span>.</li>
          <li><code>&lt;main&gt;</code> — основное содержимое страницы — уникальное содержимое каждой страницы. Значение: основное, не повторяющееся на других страницах, содержание страницы. Должен быть один на странице, исходя из определения. <span className="hl-4">Типовые ошибки: включать в этот тег то, что повторяется на других страницах (навигацию, копирайты и так далее)</span>.</li>
          <li><code>&lt;footer&gt;</code> — это заключительная часть всего сайта или смыслового раздела со справочной информацией.<span className="hl-3">Значение: заключительная часть смыслового раздела или всего сайта, обычно содержит информацию об авторах, список литературы, копирайт и так далее.</span><span className="hl-4">Особенности: этих элементов может быть несколько на странице. Тег &lsaquo;footer&rsaquo; не обязан находиться в конце раздела.</span></li>
        </ul>
        <div className="note">Если вы не хотите использовать классы для шапки и подвала сайта, то можете использовать селекторы body &gt; header и body &gt; footer. Эти селекторы не повлияют на хедеры и футеры, вложенные более глубоко.</div>
        <p>Структура страницы в разметке на этом этапе такая:</p>
        <pre>{`<!DOCTYPE html>
  <html lang="ru">
    <head>
      <meta charset="utf-8">
      <title>Заголовок страницы</title>
    </head>
    <body>
      <header class="main-header">
        <!-- Шапка сайта -->
      </header>
      <main>
        <!-- Основное содержимое страницы -->
      </main>
      <footer class="main-footer">
        <!-- Подвал сайта -->
      </footer>
    </body>
  </html>`}
        </pre>

        <h2 id={'step-2'}>Шаг 2. Размечаем в блоках крупные смысловые разделы</h2>
        <p>На этом этапе выделяются такие элементы, как:</p>
        <p><code>&lt;nav&gt;</code> — главная навигация (class=”main-header-nav”).  Обычно входит логотип – это изображение, его оборачиваем в ссылку на главную страницу (class=”logo”). Также входит главное меню сайта - ссылки, оформленные как список class=”site-navigation”, li class=”site-navigation-item”. В тег <code>&lt;nav&gt;</code> может включаться и пользовательское меню или ссылка для входа на страницу авторизации пользователя. Рекомендуется использовать только 1 раз для главного меню. В footer  достаточно использовать список со ссылками.</p>
        <p>Типовые ошибки: многие считают, что в <code>&lt;nav&gt;</code> может быть только список навигационных ссылок, но согласно спецификации там может быть навигация в любой форме.</p>
        <p><code>&lt;section&gt;</code> — смысловой раздел документа, который нельзя отделить от конкретной страницы или документа, в отличие от <code>&lt;article&gt;</code>. Например, блок «О компании», список товаров, раздел личной информации в профиле и так далее. Элемент <code>&lt;section&gt;</code> определяет смысловую секцию содержимого для создания структуры документа. Желателен заголовок внутри.</p>
        <p><code>&lt;article&gt;</code> — отделяемый от сайта смысловой раздел (может входить в section). Это блок, который вполне может существовать и отдельно от сайта, смысловая единица, например комментарий, твит, статья, виджет ВК и так далее. Желателен заголовок внутри. Примеры:</p>
        <p>Обзор (анонс обзора) – это отдельная смысловая единица, побочный, косвенный для страницы контент, который может существовать отдельно от сайта, статья, пост в блоге, сообщение на форуме.</p>
        <p><code>&lt;aside&gt;</code> — дополнительное содержимое. Для определения на макете элемента <code>&lt;aside&gt;</code> ищем блок, который напрямую не связан с главным содержимым сайта. Ещё такие блоки часто называют «сайдбарами» или боковыми панелями. Это, как правило, анонсы, реклама и подобное. может иметь свой заголовок. Может встречаться несколько раз на странице. Типовые ошибки: считать <code>&lt;aside&gt;</code> тегом для «боковой панели» и размечать этим тегом основной контент, который связан с окружающими его элементами. При этом иерархия заголовков на всей нашей странице должна быть «сквозная», то есть внутри <code>&lt;article&gt;</code> заголовок будет «очередного» уровня.</p>
        <div className="note">
          <p>Правило для определения <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code> и <code>&lt;div&gt;</code>:</p>
          <ol>
            <li>Можете дать имя разделу и вынести этот раздел на другой сайт? — <code>&lt;article&gt;</code></li>
            <li>Можете дать имя разделу, но вынести на другой сайт не можете? — <code>&lt;section&gt;</code></li>
            <li>Не можете дать имя? Получается что-то наподобие «новости и фотогалерея» или «правая колонка»? — <code>&lt;div&gt;</code></li>
          </ol>
        </div>

        <h2 id={'step-3'}>Шаг 3. Выделяем заголовок всего документа и заголовки смысловых разделов</h2>
        <p>Прежде всего важен не внешний вид заголовков, а их смысл.</p>
        <p>Основная роль заголовка — резюмирующая, он очень сжато передаёт содержание последующего текста. Прочитав заголовок, вы понимаете, что будет после него. Если резюмирующая роль выполняется, это точно заголовок.</p>
        <div className="warn">Особенности: желателен один <code>&lt;h1&gt;</code> на странице. Нежелательны пропуски в уровнях заголовков на странице.</div>
        <p>Внутри <code>&lt;article&gt;</code> заголовки можно начинать с <code>&lt;h1&gt;</code>. На макетах главных страниц не всегда рисуют заголовок первого уровня.</p>
        <div className="warn">Типовые ошибки: Определение уровня заголовка по размеру текста на макете. Не весь крупный текст — заголовки. Использование несемантичного выделения вместо заголовка, например, тегов <code>&lt;b&gt;</code>, <code>&lt;strong&gt;</code> или <code>&lt;span&gt;</code>. При озаглавливании разделов учитывается общая иерархия текстового содержимого страницы: сначала определяется, о чём эта страница целиком, какие разделы документа более крупные, какие — дополнительные.</div>
        <p><span className="hl-1">В итоге заголовки должны из себя представлять явное дерево: от главного <code>&lt;h1&gt;</code> на странице до структурно следующих за ним <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code> и так далее.</span></p>
        <p>Пример:</p>
        <ul>
          <li>h1 — Интернет-магазин зоотоваров «Усы, лапы и хвост»</li>
          <li>h2 — Список товаров</li>
          <li>h2 — Похожие предложения</li>
          <li>h3 — Когтеточка «Росомаха»</li>
          <li>h3 — Палка с пером «Шерстяной охотник»</li>
          <li>…</li>
        </ul>
        <p>Подходящие по смыслу заголовки лучше добавлять в разметку страницы, даже если в макете заголовок документа или смыслового блока отсутствует. Так документ будет более структурированным. При этом, чтобы свёрстанный сайт визуально полностью соответствовал макету, такие «невидимые» заголовки скрываются с помощью специального класса в CSS. Таким образом «визуально скрытый» заголовок остаётся видимым для поисковиков и скринридеров (class=”visually-hidden”).</p>
        <p><span className="hl-10">У валидатора w3c есть специальный режим для вывода структуры заголовков и структуры страницы.</span></p>

        <h2 id={'step-4'}>Шаг 4. Размечаем мелкие элементы в смысловых разделах</h2>
        <p>Определить, какие теги использовать, можно методом исключения:</p>
        <ul>
          <li>Получилось найти самый подходящий смысловой тег — использовать его.</li>
          <li>Для потоковых контейнеров — <code>&lt;div&gt;</code>.</li>
          <li>Для мелких фразовых элементов (слово или фраза) — <code>&lt;span&gt;</code> - универсальный фразовый элемент без собственного значения, смысл этому элементу придаётся с помощью атрибута class.</li>
        </ul>

        <h3 id={'markup-abbr'}>Размечаем аббревиатуры, тег <code>&lt;abbr&gt;</code></h3>
        <p>Тег <code>&lt;abbr&gt;</code> указывает, что последовательность символов является аббревиатурой. С помощью атрибута title дается расшифровка сокращения, что позволяет понимать аббревиатуру тем людям, которые с ней не знакомы. Кроме того, поисковые системы индексируют полнотекстовый вариант сокращения, что может использоваться для повышения рейтинга документа.</p>
        <p><abbr data-title="Common Gateway Interface, общий шлюзовый интерфейс">CGI</abbr></p>

        <h3 id={'markup-lists'}>Размечаем списки</h3>
        <p>Несколько элементов, которые выполняют одну функцию и находятся друг с другом в одном отношении, размечают списком. Списки объединяют однородные и равноправные элементы. Если порядок элементов в списке неважен, для разметки используется тег &lt;ul&gt;, а для списков, где от перемены мест элементов списка меняется смысл, — &lt;ol&gt;.</p>
        <p>Ссылки в навигации по сайту, перечень услуг, предоставляемых на сайте, — все эти элементы можно объединять в списки, поскольку они однотипные.</p>
        <p>Корзину пользователя можно тоже считать списком, который включает всего один элемент.</p>
        <p>Главная ошибка при использовании списков — объединять в список то, что списком не является, то есть неоднородные и неравноправные элементы.</p>
        <p>К примеру, ошибочно объединять в список поле для ввода поисковой строки и ссылки пользовательского меню. Это разнотипные элементы и тут стоит разделять. Ссылки с пользовательским меню можно обернуть в список, а вот поиск лучше вынести отдельно.</p>
        <p>Если сомневаетесь список перед вами или нет, рекомендуется при чтении макета проговаривать про себя или вслух как бы вы описали этот блок. Если фраза строится по принципу «вот список чего-то», то скорее всего это и будет список. Кстати, некоторые скринридеры (программы, которые интерпретируют в виде голосовых сообщений то что происходит на экране) перед тем как начать перечисление элементов списка, так и делают, говорят: «Список из... элементов».</p>
        <p>С помощью списков легче визуально группировать элементы. В этом случае &lt;ul&gt; можно сравнить со строительными лесами, которые не несут семантической нагрузки. А значит, их можно заменить на обычные &lt;div&gt;. К тому же при стилизации &lt;div&gt; не придётся сбрасывать внутренние и внешние отступы, которые по-умолчанию есть у списков.</p>
        Ещё один вид списков, которые могут встретиться на странице сайта — это &lt;dl&gt;. Элемент &lt;dl&gt; (от английского Description List) представляет собой список описаний и служит контейнером для списка пар терминов (определяемых элементом &lt;dt&gt;) и их описаний (определяемых элементами &lt;dd&gt;). Этот элемент обычно используют при создании глоссария, для отображения метаданных (списка пар ключ-значение), для описания характеристик товара и других.

        <h3 id={'markup-tables'}>Размечаем таблицы</h3>
        <p>Таблицы это многомерные связанные данные.</p>
        <p>Простой вариант связанных данных — двумерный, это связь вида «параметр-значение». В этом случае друг с другом связаны только два поля. Такие данные можно разметить с помощью таблицы и с помощью тега <code>&lt;dl&gt;</code> (списка определений). Для многомерной связи данных подходят только таблицы.</p>
        <p>Пример: тарифы сотового оператора, расписание поездов.</p>
        <div className="warn">Типовые ошибки: использовать таблицы для сеток (так уже не делают). Не использовать таблицы там, где они нужны.</div>
        <p>Основное назначение таблиц — описывать связанные данные. Когда один параметр влияет на остальные параметры, которые с ним связаны. Например, телефонные тарифы. К тарифу привязаны поля: «количество секунд», «количество мегабайт», «стоимость секунды», «стоимость мегабайта». Если меняется тариф, меняются все четыре параметра после него. Расписания поездов, уроков, сеансов фильмов, тарифы сотовых операторов, ЖКХ и так далее можно и нужно верстать таблицами. Всё это примеры многомерных связанных данных, когда друг с другом связаны три и более параметров.</p>
        <p>Нужно ли всегда использовать таблицы по назначению? Да! Так как это может обернуться ощутимыми плюсами. Например, чтобы попасть в поисковую выдачу Google по очень горячему коммерческому запросу «расписание сапсана», команде Туту.ру пришлось переверстать расписания на своём сайте с <code>&lt;div&gt;</code> на <code>&lt;table&gt;</code>.</p>
        <p>Только после этого робот Google начал понимать, что перед ним находится не набор разрозненных тегов, а именно расписание со связанными данными. И теперь в поисковой выдаче появляется виджет с расписанием от Туту.ру, что приносит им немало бесплатного и качественного трафика.</p>

        <h3 id={'markup-demo'}>Размечаем демонстрационные материалы</h3>
        <p>Тег <code>&lt;figure&gt;</code> используется для того, чтобы выделить демонстрационный контент, он обозначает цельный и независимый блок содержания. Внутри этого тега размещают демонстрационный материал: изображения, схемы, куски кода, иллюстраций, диаграмм, таблиц и иллюстрационного кода, с комментариями и описаниями. Внутри <code>&lt;figure&gt;</code> может быть несколько связанных между собой объектов, например, несколько изображений, или график и таблица, иллюстрирующие одно и то же.</p>
        <p>Обычно используется в сочетании <code>&lt;figure&gt;</code> + <code>&lt;figcaption&gt;</code> в <code>&lt;figcaption&gt;</code> помещается заголовок или подпись к элементу, «легенда». Считается особенно правильным, если заголовок в <code>&lt;figcaption&gt;</code> стоит на первом или последнем месте внутри <code>&lt;figure&gt;</code>.</p>
        <p>Внутри <code>&lt;figure&gt;</code> можно использовать потоковые элементы, если это уместно семантически. Например, в спецификации указана возможность определить, выделить таким образом стих, который вставлен в статью.</p>

        <h4>НЕ КАЖДАЯ КАРТИНКА ЭТО <code>&lt;FIGURE&gt;</code></h4>
        <p>Спецификация обозначает <code>&lt;figure&gt;</code> как «содержимое в потоке, с необязательным заглавием, самодостаточное, обычно упоминаемое в качестве смысловой единицы в основном тексте». Как раз в этом состоит вся красота элемента <code>&lt;figure&gt;</code>, который может быть перемещён из основного содержимого, скажем, в колонку, что никак не повлияет на основной поток документа.</p>
        <p>Если это исключительно оформительская картинка, никаким образом не упомянутая в основном документе, то это точно не <code>&lt;figure&gt;</code>. Есть и другие варианты использования, но просто спросите себя: «Нужна ли эта картинка для лучшего понимания контекста?» Если нет, то это вероятно не <code>&lt;figure&gt;</code>, а, возможно, <code>&lt;aside&gt;</code>. Если да, спросите себя: «Можно ли переместить эту картинку в примечания к тексту?» Если ответ на оба вопроса «да», то это, вероятнее всего, <code>&lt;figure&gt;</code>.</p>

        <h4>ВАШ ЛОГОТИП — ЭТО НЕ <code>&lt;FIGURE&gt;</code></h4>
        <p>Этот элемент должен использоваться, только если он упоминается в документе или контексте общего структурного элемента. Будет честным признать, что ваш логотип вряд ли будет упомянут подобным образом.</p>

        <h4>ЭЛЕМЕНТ <code>&lt;FIGURE&gt;</code> — ЭТО НЕ ТОЛЬКО КАРТИНКИ</h4>
        <p>Другое распространённое заблуждение насчёт <code>&lt;figure&gt;</code> — что он может быть использован только для картинок. Это не так. Элемент <code>&lt;figure&gt;</code> может быть видео, аудио, графиком (на SVG, к примеру), цитатой, таблицей, блоком кода, фрагментом текста или любой комбинацией этих и многих других элементов. Не ограничивайте использование <code>&lt;figure&gt;</code> только картинками. Наша работа, как энтузиастов от веб-стандартов, заключается в том, чтобы максимально точно описывать содержимое при помощи разметки.</p>

        <h3 id={'markup-hyphenations'}>Размечаем параграфы и переносы</h3>
        <p>Значение: параграф, абзац (как структурный элемент, а не как смысловой). В HTML параграф — это неразрывная последовательность фразовых элементов. То есть абзац — это структурная сущность, форма.</p>
        <div className="warn">Типовые ошибки: использовать внутри параграфов не фразовые элементы, например списки.</div>
        <p>Стоит помнить, что использование <code>&lt;br&gt;</code> допустимо точечно в небольших информационных и промо-текстах, если так требуется в макете. Но в то же время недопустимо использовать тег <code>&lt;br&gt;</code> для разделения абзацев вместо тега <code>&lt;p&gt;</code>.</p>
        <p>Также его нельзя использовать в крупных текстовых массивах для подгонки переносов текста «как в макете». Ошибкой будет проставить теги <code>&lt;br&gt;</code> в конце каждой строки, чтобы текст переносился один в один как на макете. Во всех этих случаях вёрстка становится «негибкой». Перестройкой текста с добавленными принудительными переносами становится неудобно управлять. Использование <code>&lt;br&gt;</code> довольно чётко регламентировано в спецификации.</p>
        <p>Тег <code>&lt;p&gt;</code> удобно использовать как контейнер для мелких фразовых элементов. Простой пример — форма поиска отелей. Типовая задача разметки форм, в которой нужно сгруппировать подпись — <code>&lt;label&gt;</code> и само поле для ввода — <code>&lt;input&gt;</code>. Теги <code>&lt;label&gt;</code> и <code>&lt;input&gt;</code> — два фразовых элемента, которые формируют отдельную структурную сущность. Для группировки этих элементов можно использовать тег <code>&lt;p&gt;</code>.</p>
        <pre>{`<p>
  <label>Дата заезда:</label>
  <input type="text" value="24 апреля 2017">
</p>`}
        </pre>

        <h3 id={'markup-forms'}>Размечаем формы</h3>
        <p>Элемент HTML-формы — это раздел документа, включающий поля и интерактивные элементы управления, которые позволяют пользователю отправлять информацию на веб-сервер. Чтобы добавить форму на страницу, нужно использовать парный тег <code>&lt;form&gt;</code>, внутри которого размещаются поля формы. В частном случае — это может быть одно поле.</p>
        <p>Рассмотрим типовые варианты форм на страницах сайтов. Не ограничивайтесь использованием только type=&quot;text&quot;, используйте типы tel, email и так далее в зависимости от содержимого поля. Полный список возможных типов можно найти в спецификации.</p>

        <h4>НЕПРАВИЛЬНОЕ ИСПОЛЬЗОВАНИЕ АТРИБУТОВ ФОРМ</h4>
        <p>Некоторые новые атрибуты для элементов форм являются одиночными, и только одно их присутствие в разметке обеспечивает смену поведения. Эти атрибуты включают: autofocus, autocomplete, required.</p>
        <p>Существует три правильных способа задания одиночных атрибутов, второй и третий из которых нужны только если вы пишете XHTML: required, required=&quot;&quot;, required=&quot;required&quot;.</p>
        <p>
          <button className="add-theory-button"
            onClick={() => (state.activeItem['label']) ? toggleActiveItem('') : toggleActiveItem('label')}
          ><span className="hl-8">О важности использования label в формах</span>
          </button>
          {(state.activeItem['label']) && <AboutLabel />}
        </p>
        <p><a href="https://yoksel.github.io/bad-practices/forms-markup/" target="_blank" rel="noopener noreferrer">Верстка форм: как не надо</a></p>

        <h3 id={'markup-quotes'}>Размечаем цитаты</h3>
        <p>Один из типовых разделов сайта — блок с отзывами посетителей сайта, покупателями товаров/услуг. Для разметки отдельного отзыва в таком блоке может пригодиться тег <code>&lt;blockquote&gt;</code>. Следует помнить, что в тег оборачивается не только цитата, но и элемент с источником цитаты, а также дополнительная информация об источнике.</p>
        <p>Семантическое значение цитаты — внешний контент, то есть <code>&lt;q&gt;</code> — это строчный элемент, содержащий материалы не уникальные, имеющие другой источник. А <code>&lt;blockquote&gt;</code>, соответственно, тег для выделенных, вынесенных в отдельную секцию цитат.</p>
        <p>Цитата внутри текста может верстаться тегом <code>&lt;q&gt;</code> (сокращение от quote) и не выходит из абзаца. Такие цитаты могут быть выделены другим начертанием. До и после содержимого тега <code>&lt;q&gt;</code> браузер автоматически проставляет кавычки подходящего для языка документа вида.</p>
        <pre>{`<p>Вадим Макеев говорил, что <q>когда много лет назад придумали HTML,
  мир был совсем другим</q>, и это означает, что реалии мира влияют на язык разметки сильнее,
  чем кажется.</p>`}
        </pre>
        <p>Вместо <code>&lt;q&gt;</code> можно просто использовать принятые на вашем сайте кавычки, спецификация разрешает это. Использовать <code>&lt;q&gt;</code> для контента, не являющегося цитатой (для сарказма или переводных слов, выделяющихся кавычками) — не семантично.</p>
        <p>Обособленные цитаты оборачиваются в тег <code>&lt;blockquote&gt;</code>: это не только текстовый элемент, но и элемент для разметки секций. Это означает, что у цитаты могут быть свои заголовки, хедер и футер и текстовые элементы.</p>
        <pre>{`<blockquote>
  <cite>Оксана Тодоренко</cite>
  <p>19 лет</p>
  <p>У меня был печальный опыт занятий пилатесом,
  связанный с некомпетентностью инструктора, который проводил тренировки.
  Я занималась пилатесом 2 месяца, а потом забросила.</p>
</blockquote>`}
        </pre>
        <p>У цитат есть своя специфика вёрстки. Например, есть атрибут cite, который также может выступать как тег <code>&lt;cite&gt;</code>, оба применяются для указания источника (не только для источника-сайта, но и для автора высказывания, для названия произведения, ссылки на первоисточник). Атрибут cite нужен для соблюдения авторского права, визуально он не отображается:</p>

        <h3 id={'markup-contacts'}>Размечаем контактную информацию</h3>
        <p>Зачастую в футере появляется контактная информация: как связаться, куда прийти, куда написать. Это можно разметить параграфами — или специальным тегом <code>&lt;address&gt;</code>.</p>
        <p><code>&lt;address&gt;</code> — тег с очень узким значением. Это именно контактная информация. То есть в теге может быть ссылка на автора, по которой с автором можно связаться, актуальный адрес электронной почты или номер телефона. Почтовый адрес в этот тег можно обернуть только тогда, когда этот почтовый адрес — реальный метод связи.</p>
        <p><code>&lt;address&gt;</code> относится к непосредственному родительскому элементу, в который он вложен. То есть если у вас на странице несколько тегов <code>&lt;article&gt;</code>, в каждом из которых находится, допустим, отдельная услуга, и для покупки стоит позвонить по уникальному номеру, то каждый <code>&lt;address&gt;</code> должен быть дочерним для собственного <code>&lt;article&gt;</code>.</p>
        <p><code>&lt;address&gt;</code>, расположенный непосредственно в <code>&lt;body&gt;</code>, содержит контакты для всего сайта. Обычно <code>&lt;address&gt;</code> располагают в <code>&lt;footer&gt;</code>, и это логично и привычно, и соответствует семантическому назначению футера.</p>
        <pre>{`<footer>
  <address>
    Свяжитесь с нами, ну пожалуйста! Купите хоть что-нибудь!
    <a>. href="mailto:sale@mail.com">Илья Продажник</a>.
  </address>
  <p><small>© 2020 Продам всё Inc.</small></p>
</footer>`}
        </pre>

        <h3 id={'markup-progress'}>Размечаем прогресс и измерения</h3>
        <p>Специфический тег для визуализации прогресса в исполнении задачи — <code>&lt;progress&gt;</code>. Имеет два основных атрибута, value — текущее значение, и max — максимально возможное значение. Если максимальное значение не задано, можно указывать текущее в виде десятичной дроби от 0.0 до 1.0.</p>
        <p>Если не указать ни одного из значений, по умолчанию полоска рейтинга будет бегать от одного края к другому, показывая, что система ожидает данных.</p>
        <pre>{`<h2>Сделать всё очень круто</h2>
<p>Задача выполнена на: <progress max="100" value="10">10%</progress></p>`}
        </pre>
        <p>Этот тег не следует использовать для отображения измерений, количеств и так далее, это тег исключительно для прогресса в исполнении задач. Размер и оставшееся место, километраж, места, лимиты и количества несемантично описывать тегом <code>&lt;progress&gt;</code>, для этого есть тег <code>&lt;meter&gt;</code>.</p>
        <p><code>&lt;meter&gt;</code> — это как раз количества, измерения и расстояния, этот тег семантичен для тех шкал, которые не прогресс. Он не поддерживается в Internet Explorer, в IE вместо шкалы будет выведен текст. Например, в Internet Explorer из примера ниже будет выведено только «150ГБ из 736ГБ занято».</p>
        <p>Вот атрибуты, которые применяются к этому тегу (кроме глобальных):</p>
        <ul>
          <li>value — текущее значение;</li>
          <li>min — нижняя граница диапазона;</li>
          <li>max — верхняя граница диапазона;</li>
          <li>low — считается низким значением (предельным);</li>
          <li>high — считается высоким значением (предельным);</li>
          <li>optimum — оптимальное значение.</li>
        </ul>
        <p><span className="hl-4">Сложность — правильно их скомбинировать.</span></p>
        <pre>{`<meter min="0" max="100" high="70" value="80"></meter>
  <!-- Как это читать: значение не может быть ниже нуля;
  не может быть выше 100;
  70 — это высокое значение;
  текущее значение — 80, выше высокого -->

  <meter value="100" max="100">Кипяток</meter>`}
        </pre>

        <h3 id={'step-5'}>Шаг 5. Размечаем фразовые элементы</h3>
        <p>фразовые элементы: img, a, video, b, i, strong, em, time, span.</p>

        <h3 id={'markup-images'}>Размечаем изображения: <code>&lt;img&gt;</code></h3>
        <p><a className="text-link" href="https://htmlacademy.ru/blog/boost/graphics/content-or-decor-img" target="blank">Как отличить контентное изображение от декоративного</a></p>
        <p>Контентное содержательное изображение - имеет информационное значение и несут смысл для пользователя, так как влияют на его выбор, на принимаемое пользователем решение.</p>
        <p>Хороший тон — задавать атрибут alt, который кратко описывает содержание картинки. Также желательно указывать размеры изображения - width и height, чтобы браузер лишний раз не перестраивал страницу при загрузке.</p>
        <p>Логотип лучше всегда делать картинкой и никогда текстом.</p>
        <div className="warn">Типовые ошибки: Использовать контентные изображения вместо фоновых. Использовать фоновые изображения вместо контентных.</div>
        <p><a className="text-link" href="https://htmlacademy.ru/blog/boost/frontend/alt-text" target="blank">Как правильно написать alt-текст</a></p>

        <h3>Размечаем ссылки: <code>&lt;a&gt;</code></h3>
        <p>В аббревиатуре HTML «HT» значит hypertext, а «ML» — markup language, то есть язык разметки гипертекста. Гипертекст — это документы, связанные между собой ссылками.</p>
        <p>Иногда ссылки могут выглядеть как кнопки, а кнопки — как ссылки. Ответ на вопрос, что сделать ссылкой, не всегда очевиден. Всё зависит от того, как должны вести себя элементы при наведении курсора мыши и какие действия выполняются при нажатии курсора. Обычно это прописано в техническом задании для сайта.</p>
        <p><a className="text-link" href="https://htmlacademy.ru/blog/boost/frontend/links-or-buttons" target="blank">Что лучше использовать: ссылки или кнопки</a></p>
        <p>Часто ссылкам добавляют внутренние отступы, чтобы увеличить область, по которой можно кликнуть (её ещё называют активной областью). Чем проще попасть по ссылке, тем удобнее интерфейс.</p>
        <p>По умолчанию ссылки имеют строчный тип бокса. Браузер игнорирует внешние отступы по вертикали у строчных боксов, а их внутренние отступы сверху и снизу не влияют на расположение других элементов. Самый простой способ решить эту проблему — изменить у ссылок тип бокса на блочные.</p>

        <h3 id={'markup-buttons'}>Размечаем кнопки: <code>&lt;button&gt;</code></h3>
        <p>Его значение по умолчанию — submit, но часто нужно значение button. Кнопка не обязательно должна находиться в пределах формы. Часто это просто интерактивный элемент, который «оживляется» с помощью JavaScript.</p>

        <h3 id={'markup-video'}>Размечаем видео- и аудио-контент.</h3>
        <p>На страницах типичных лендингов с большим количеством визуального контента часто используется встроенный видео-контент. До появления HTML5, если вы хотели добавить видео на веб-страницу, приходилось использовать элемент <code>&lt;object&gt;</code>, представляющий собой универсальный контейнер для внешних объектов, либо подключать внешний модуль браузера. Сейчас же для добавления видео на страницу достаточно тега <code>&lt;video&gt;</code>, который поддерживает большое количество видео форматов.</p>
        <p>Его основные атрибуты:</p>
        <ul>
          <li>width и height	задают ширину и высоту видео</li>
          <li>controls	пустой атрибут, при наличии которого отображается панель управления видео</li>
          <li>preload	задаёт режим предзагрузки видео, имеет 3 возможных значения:</li>
          <li>none — не загружать ничего;</li>
          <li>metadata — загрузить служебную мета-информацию (длительность, первый кадр и так далее);</li>
          <li>auto — можно загрузить всё видео - значение по умолчанию зависит от браузера</li>
          <li>src	задаёт адрес видеофайла</li>
          <li>autoplay	пустой атрибут, при наличии которого воспроизведение видео начинается автоматически</li>
          <li>poster	задаёт адрес картинки-обложки, которая отображается, когда видео ещё не загрузилось или не воспроизводится</li>
        </ul>

        <h4>Форматы и источники видео</h4>
        <p>в текущий момент существует несколько форматов видео, каждый из которых хорошо поддерживается лишь некоторыми браузерами. Вот три самых распространённых формата и их поддержка: MPEG-4/H.264, OGG/Theora, WebM</p>
        <p>Поэтому мы должны в видео указывать адреса файлов во всех этих форматах (и конвертировать исходное видео в эти форматы, конечно). Делается это с помощью тегов <code>&lt;source&lt;</code>:</p>
        <pre>{`<video controls>
  <source src="video.mp4" type="video/mp4">
  <source src="video.ogv" type="video/ogg">
  <source src="video.webm" type="video/webm">
</video>`}
        </pre>
        <p>В атрибуте src указывается адрес видеофайла, а в атрибуте type его тип (также там могут указываться и кодеки). Браузер из списка видеофайлов выбирает первый, который может проиграть и загружает его.</p>
        <p>Атрибут type не является обязательным, так как браузер умеет сам определять тип и кодеки, но указывая тип явно, мы помогаем ему не ошибиться.</p>
        <p>В этом примере показано, как с помощью атрибута poster можно добавить картинку-обложку для видео. Часто встречается ситуация, когда стандартные элементы управления видео, которые подключаются с помощью атрибута controls, не подходят под макет сайта. Есть возможность их отключать, а взамен использовать кнопки, внешний вид которых задаётся с помощью стилей.</p>
        <p>Есть несколько неочевидных вещей при работе с видео.</p>
        <p>Во-первых, что тег <code>&lt;video&gt;</code> предназначен не для всех видео, а для тех, на которые мы можем дать прямую ссылку. Зачастую это видеофайлы, которые мы храним на нашем собственном сервере. Это материалы, за которые мы переживаем: уникальный контент, который нам не хочется выкладывать на внешние сервисы вроде YouTube.</p>
        <p>Во-вторых, что автопроигрывание — зло, и не нужно вставлять существующий для автоматического запуска видео пустой атрибут autoplay, это неприятно, когда пользователь открывает сайт, и у него тут же что-то начинает проигрываться.Можете посмотреть ролик Вадима Макеева о том, как вставлять видео с YouTube. Дело в том, что на YouTube невозможно получить прямую ссылку на видеоролик, чтобы вставить его в тег <code>&lt;video&gt;</code>, и это приходится делать через тег для вставки фреймов, <code>&lt;iframe&gt;</code>, который позволяет вставлять в вёрстку внешние самостоятельные документы. Подробности про тег <code>&lt;iframe&gt;</code> и фреймы вообще мы будем рассматривать, когда дойдём до интерактивных элементов сайта.</p>
        <p>Так или иначе, <code>&lt;video&gt;</code> — это интерактивный контент, который скорее всего будет управляться скриптом, и который непросто стилизуется. Для семантической вёрстки достаточно разметить ссылки на все три основных формата видео, прописать размеры, определить, что будет загружено сразу при обновлении страницы, задать обложку.</p>

        <h4>Тег audio, аудио</h4>
        <p>Работа с аудио в HTML очень похожа на работу с видео, только у тега для аудио чуть меньше параметров. Для вставки звука предназначен тег <code>&lt;audio&gt;</code>. Его основные атрибуты:</p>
        <ul>
          <li>controls	пустой атрибут, при наличии которого отображается панель управления проигрывателем</li>
          <li>preload	задаёт режим предзагрузки аудио, имеет 3 возможных значения:
            <ul>
              <li>none — не загружать ничего;</li>
              <li>metadata — загрузить служебную мета-информацию;</li>
              <li>auto — можно загрузить весь файл. Значение по умолчанию зависит от браузера</li>
            </ul>
          </li>
          <li>src	задаёт адрес аудиофайла</li>
          <li>autoplay	пустой атрибут, при наличии которого воспроизведение звука начинается автоматически</li>
          <li>muted	- воспроизведение без звука.</li>
        </ul>

        <h4>Форматы и источники звука</h4>
        <p>У звуковых файлов с поддержкой форматов дела обстоят лучше, чем у видео. Для охвата большинства современных браузеров, достаточно использовать всего два формата: MP3, OGG</p>
        <p>И снова мы не можем указать только один файл в атрибуте src у тега <code>&lt;audio&gt;</code>. Мы должны так же, как и в случае с видео, перечислить адреса звуковых файлов в разных форматах с помощью тегов <code>&lt;source&gt;</code></p>

        <h3 id={'markup-time'}>Размечаем время</h3>
        <p>Тег <code>&lt;time&gt;</code> указывает на дату и время, причём как для людей, так и для роботов. Если внутри тега находится текст вроде «через день после конца каникул», то машиночитаемую форму стоит указать в атрибуте datetime. Машиночитаемый формат — это целый комплекс вариантов, и все они указаны в спецификации.</p>
        <pre>{`<!-- Год, месяц, день -->
  2020-01-01
  2020-01
  01-01
>!-- Локальное время -->
  15:12
>!-- Год, месяц, день и локальное время вместе -->
  2020-01-01T15:12`}
        </pre>
        <p>Тег <code>&lt;time&gt;</code> удобно использовать для разметки даты публикации поста в блоге. Если в метаинформации для поста блога используется период, каждая дата размечается тегом <code>&lt;time&gt;</code>.Браузер отображает только содержимое тега, а содержимое datetime не отображается. Человек увидит только слово «вчера», а машина прочитает атрибут и получит дату в нужном ей формате.</p>

        <h2 id={'markup-text-elements'}>Размечаем мелкие текстовые элементы: <code>strong</code>, <code>em</code>, <code>b</code> и <code>i</code></h2>
        <ul>
          <li><code>&lt;i&gt;</code> — дополнительное выделение (иностранные слова, термины) или просто курсив.</li>
          <li><code>&lt;b&gt;</code> — стилистическое усиление текста (ключевые слова) или просто жирное начертание. Спецификация приводит примеры использования тега <code>&lt;b&gt;</code> для разметки ключевых слов в документе и лидов (первый абзац статьи в журналистике).</li>
          <li><code>&lt;em&gt;</code> — эмоциональное выделение, слово или фраза, произнесённые иначе.</li>
          <li><code>&lt;strong&gt;</code> — высокая важность, смысловое акцентирование.</li>
          <li><code>&lt;br&gt;</code> -  перенос строки. Типовые ошибки: слишком частое использование. Использование вместо параграфов или отступов.</li>
        </ul>
        <p>Для зачёркиваний обычно используется <code>&lt;s&gt;</code> — тег, который можно очень коротко определить как тег для зачёркивания. Но что он означает семантически? Это информация, которая важна, которая является частью контента, но больше не актуальна. Например, старая цена зачёркнута и вписана новая цена, старая дата зачёркнута, а новая вписана, и так далее. Когда важно показать то, что зачёркнуто, поскольку оно является частью материала, используется тег <code>&lt;s&gt;</code>.</p>
        <p>А что же делают теги, которым посвящена целая глава спецификации: теги изменений?</p>
        <p>Это теги для того, чтобы работать с редактурой: что мы убрали, что добавили. Это может быть очень полезно при работе с проектами или изменениями документов: какие параграфы удалены и больше не имеют значения, а какие — добавлены, заодно можно дать ссылку на причину изменений. Значение этих тегов — редакционное, и они обычно применяются в уже опубликованных документах.</p>
        <p>Тег <code>&lt;ins&gt;</code> предназначен для того, чтобы разметить добавление в материал. Тег <code>&lt;del&gt;</code>, соответственно, чтобы разметить ту информацию, которую мы оттуда удалили. У этих тегов могут быть атрибуты cite и datetime.</p>
        <p>Атрибут datetime используется для отображения информации о дате произошедшего изменения, и, хотя это необязательный атрибут, он может быть полезным в некоторых ситуациях, а cite используется для ссылки на источник или описание произошедшего изменения.</p>
        <p>Оба тега, <code>&lt;ins&gt;</code> и <code>&lt;del&gt;</code>, являются поточными и фразовыми элементами, то есть могут функционировать как метод выделения или как отдельный элемент внутри секции. Обычно эти теги используются для редактуры уже готового материала.</p>
        <p>Какие семантические элементы могут удаляться и вставляться этими тегами вообще? Например, абзацы или отдельные фразы.</p>
        <pre>{`<section>
  <ins>
  <p>Это тот абзац, который мы добавляем.</p>
  </ins>
  <p>А в этом абзаце мы <del>растерзали, удавили,</del> удалили кусочек текста</p>
</section>`}
        </pre>

        <h2>Итог</h2>
        <p>Следуя алгоритму разметки, мы идём от общего к частному: сначала размечаем крупные блоки, а затем детализируем каждый блок. Такой подход позволяет чётко представлять структуру размечаемого документа и подробно реализовывать её. По сути, мы сначала создаём оглавление нашего документа, а затем пишем каждую его главу.</p>

        <h3>Cases</h3>
        <h4 id="case-block-link">Как сделать блок-ссылку</h4>
        <p>Блоки можно оборачивать в ссылки, главное, чтобы внутри не было интерактивных элементов.</p>
        <pre>{`<a href="#a">
    Foo
    <object type="owo/uwu">
        <a href="#b">
            Bar
        </a>
    </object>
    Baz
</a>`}
        </pre>
      </section>
    </DocumentMeta>
  );
}
export default SemanticMarkup;
