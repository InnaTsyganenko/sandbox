import React from 'react';

function Links() {

  return (
    <section className="conspect">
      <h1>Ссылки</h1>
      <p>Ссылки создаются с помощью тега <code>&lt;a&gt;</code>  (сокращение от «anchor - якорь»). Адрес ссылки задаётся в формате URL с помощью атрибута href (сокращение от «hyper reference - гиперссылка»).</p>
      <p>Тег <code>&lt;a&gt;</code> можно использовать вообще без адреса, то есть без атрибута href. Такой тег обозначает «ссылку-заглушку», которая в других условиях может стать обычной ссылкой. Часто ссылки-заглушки используют, чтобы показать, что мы находимся на текущей странице.</p>
      <p>Когда мы удаляем атрибут href у ссылки, то лучше оставить подсказку о том, почему мы это сделали. Подсказку можно добавить с помощью атрибута title. Подсказка появится, когда курсор задержится над ссылкой некоторое время.</p>
      <p>Основные атрибуты, которые характерны для ссылок:</p>
      <ul>
        <li>href=&quot;#&quot; — собственно ссылка (на внешнюю страницу или якорь);</li>
        <li>target=&quot;_blank&quot; — цель, в этом значении — открытие в новом окне;</li>
        <li>download — скачивание файла, на который ведёт ссылка;</li>
        <li>rel=&quot;nofollow noreferrer&quot; — Его используют вместе с тегами a и link. Он определяет текущий документ как базовый по отношению к тому, на который ведёт ссылка (rel — от relationship). Значение noopener не позволяет предоставить доступ к данным текущей страницы, а noreferrer скрывает адрес страницы, с которой вы перешли. <a href="https://developers.google.com/search/docs/advanced/appearance/qualify-outbound-links?hl=ru&visit_id=637695503065852467-1826945692&rd=1" target="_blank" rel="noopener noreferrer">Комментарий Google</a>  по этому поводу;</li>
        <li>lang=&quot;fr&quot; — по ссылке контент на французском языке. Коды языков: <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry" target="_blank" rel="noopener noreferrer">IANA Language Subtag Registry</a>;</li>
        <li>hreflang=&quot;de&quot; — означает, что по ссылке — дубликат страницы на немецком. <a href="https://developers.google.com/search/docs/advanced/crawling/localized-versions?hl=ru&visit_id=637695504159063876-2326398064&rd=1" target="_blank" rel="noopener noreferrer">Комментарий Google</a> по этому поводу;</li>
        <li>type=&quot;text/html&quot; — указывает на MIME-тип материала по ссылке. <a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener noreferrer">Список MIME-типов</a>.</li>
        <li>ping - нужен, чтобы узнать, по каким сторонним ссылкам люди переходят на сайт.</li>
      </ul>

      <h3>Абсолютные ссылки</h3>
      <p>Если нужно сделать ссылку на другой сайт в интернете, то необходимо использовать абсолютный адрес: <span className="hl-7">https://site.ru/blog/index.html</span></p>
      <p>Абсолютные адреса содержат минимум три части: протокол, имя сервера и путь.</p>
      <p>Чтобы ссылка открывалась в новой вкладке нужно указать атрибут <span className="hl-8">target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;</span></p>
      <a href="https://habr.com/ru/post/282880/" target="_blank" rel="nofollow noopener noreferrer">Опасный target=&quot;_blank&quot;</a>

      <h3>Относительные ссылки</h3>
      <p>Когда файл по ссылке должен открываться локально на компьютере, используются относительные адреса.</p>
      <p>Относительные адреса работают не только для файлов на компьютере, но и для страниц в сети. Если выложить два каких-то файла в интернет (не меняя их взаимное расположение), то их ссылка друг на друга всё равно будет работать.</p>

      <h3>Ссылки на файл</h3>
      <p>По ссылкам можно не только переходить, но и скачивать файлы. Для этого необходимо просто в атрибуте href прописать ссылку на этот файл. А для того чтобы предотвратить открытие файлов прямо в браузере, у тега <code>&lt;a&gt;</code> существует атрибут <span className="hl-9">download</span>.</p>
      <p><span className="hl-10">При скачивании или загрузке файлов со сторонних сайтов для безопасности можно использовать атрибут rel=&quot;noopener&quot;. Этот атрибут позволяет игнорировать скрипты сторонней страницы, которые могут влиять на загрузку файла. Особенно актуален этот атрибут в случае, если загрузка происходит в новой вкладке или новом окне.</span></p>

      <h3>Ссылки-якоря</h3>
      <p>Ссылка-якорь — это обычная ссылка, в адресе которой используется символ #, после которого следует идентификатор элемента. Идентификатор создаётся с помощью атрибута id у того тега, к которому надо перейти при щелчке по ссылке: <code>&lt;a href=&quot;#part1&quot;&gt;Глава 1&lt;/a&gt;</code></p>
      <p>При щелчке по такой ссылке браузер найдёт на странице элемент с соответствующим атрибутом id и прокрутит окно страницы к нему. При этом перезагрузки страницы не произойдёт.</p>
      <p>Якорь также можно использовать и в абсолютных адресах, тогда после перехода на нужную страницу по аналогии произойдёт прокрутка к заданной части этой страницы.</p>

      <h3>Ссылки с телефоном и почтой</h3>
      <h4>href=&quot;tel&quot;</h4>
      <p>Ссылка на номер телефона размечается с помощью специального префикса перед адресом ссылки — tel:</p>
      <pre>{'<a href="tel:+79123456789">8-912-345-67-89</a>'}
      </pre>
      <p>Стилизоваться такая ссылка может с помощью CSS-селектора a[href^=&quot;tel:&quot;].</p>
      <pre>{`a[href^="tel:"] {
  font-size: 16px;
  line-height: 32px;
  text-decoration: none;
  color: #000000;

  А так можно добавить иконку телефона из Unicode, которая есть во всех системах:

  a[href^="tel:"]:before {
    content: "&bsol;260e";
    margin-right: 0.5em;
  }
}`}
      </pre>
      <p>если кликнуть на ссылку с tel на смартфоне откроется приложение-звонилка, в котором будет набран указанный в ссылке номер. Если открыть такую ссылку на компьютере, где есть программа для звонков, произойдёт то же самое.</p>

      <h4>href=&quot;mailto&quot;</h4>
      <p>Ссылка на электронную почту обычно в HTML размечается похожим образом: в адресе ставится префикс mailto:.</p>
      <pre>{`<a href="mailto:mail@htmlacademy.ru">mail@htmlacademy.ru</a>

a[href^="mailto:"] {
  font-size: 16px;
  line-height: 32px;
  color: #000000;
}`}
      </pre>
      <p>через mailto: можно отправить целое письмо, в котором сразу будут заполнены и адрес, и тема, и даже какой-нибудь текст. Иногда это удобно — пользователю не нужно набирать номер телефона вручную, а письмо в службу поддержки можно начать сразу с конкретной темы.</p>
      <p>Сначала в адресе ставится префикс mailto:, после которого указывается адрес почты. Текст письма указывается с помощью параметра body. За тему письма отвечает параметр subject. Можно даже указать кого-то в копии, для этого используются параметры cc и bcc.</p>
      <pre>{'<a href="mailto:blog@htmlacademy.ru&cc=mail@htmlacademy.ru?body=Привет, подпишитесь на рассылку">Напишите нам</a>'}</pre>
      <p>если кликнуть на ссылку с mailto откроется почтовая программа, в которой уже будут заполнены все нужные поля. Если почтовая программа по умолчанию не установлена, появится окно выбора программы.</p>
      <p>Обратите внимание, что адреса с нестандартными символами, например, кавычками или дополнительными знаками @, нужно записывать особым образом. Подробнее об этом и других сложных случаях читайте в <a href="https://datatracker.ietf.org/doc/html/rfc6068#section-6.2" target="_blank" rel="noopener noreferrer">RFC 6068</a>.</p>
      <p>Для стилизации ссылки на электронную почту можно воспользоваться CSS-селектором a[href^=&quot;mailto:&quot;].</p>

      <h3>text-decoration</h3>
      <p>Пока не все свойства text-decoration работают хорошо. Например, text-decoration-skip, которое должно заставить пропускать пробелы или определённые элементы, пока работает только в Safari. Свойство text-decoration-thickness, позволяющее задавать толщину, тоже работает пока что не везде. Проверяйте в CanIUse.</p>
      <pre>{`.link {
  text-decoration: underline;          /* Показывает, что текст подчёркнут */
  text-decoration-color: #da5530;      /* Цвет линии */
  text-decoration-style: double;       /* Стиль линии — двойной */
  text-decoration-skip-ink: auto;      /* Пропускает элементы шрифта */
  text-underline-position: auto;       /* Со значением under линии опустились бы ниже */
}`}
      </pre>
      <p>Значения text-decoration-style</p>
      <ul>
        <li>solid — сплошная линия;</li>
        <li>double — двойная сплошная линия;</li>
        <li>wavy — волнистая линия;</li>
        <li>dotted — точки;</li>
        <li>dashed — штрихи.</li>
      </ul>
      <p>Свойства box-shadow или border-bottom позволяют сделать подчёркивание другого цвета и даже с изысками. Проблема только в том, что это «костыль», расположение линии, сделанной таким образом, зависит от интерлиньяжа, и если шрифт увеличить, а интерлиньяж задан в абсолютных единицах, то подчёркивание может превратиться в зачёркивание.</p>
      <pre>{`.link {
  text-decoration: none;
  border-bottom: 2px solid #da5530;
  font-size: 16px;
  line-height: 18px;
}`}
      </pre>
      <img src="img/text/text-38.png" alt="" width="800" />
      <pre>{`a {
  text-decoration: none;
  font-family: "Montserrat", "Arial", sans-serif;
  font-style: normal;
  font-weight: normal;
  font-size: 16px;
  line-height: 20px;
  color: #0083ff;
}

a:visited {
  color: #8d00bf;
}

a:hover {
  color: #0063bf;
  border-bottom: 1px solid #0063bf;
  cursor: pointer;
}

a:active {
  padding: 10px;
  border: 2px solid rgba(0, 131, 255, 0.4);
  box-sizing: border-box;
  border-radius: 2px;
}`}
      </pre>
      <p className="hl-2">Для состояний ссылок очень важно соблюсти порядок, в котором будут записаны селекторы с псевдоклассами. Обязательно размещайте их в следующей последовательности:</p>
      <pre>{`a { color: red; }
a:visited { color: grey; }
a:hover { color: blue; }
a:active { background-color: yellow; }`}
      </pre>
      <p>Если поменять строки местами, то согласно правилам каскадности, некоторые стили перестанут работать. Дело в том, что ссылка может находиться одновременно в двух состояниях, к примеру, в :visited и в :hover, и если расположить стили для :hover выше, чем стили для :visited, то они перекроют последние.</p>
      <p>Можно изменить вид курсора. Самое стандартное — сделать при наведении курсор в виде руки: cursor: pointer;, его хорошо и правильно делать при наведении на ссылку, это позволяет пользователю понять, что элемент кликабельный. Такая стилизация ссылок есть в браузерах по умолчанию.</p>

      <h3>Якоря и сноски</h3>
      <p>Суть якоря в том, что он «переносит» в конкретное место на той же странице, а не «перекидывает» на другую страницу или другой сайт.</p>
      <p>Якоря и сноски имеют общую механику: в атрибут href у ссылки (на которую нужно нажать, чтобы перенестись к якорю) помещается ключ с решёткой href=&quot;#subj&quot;, а сам якорь находится в том месте, куда нужно попасть, и содержит в атрибуте id тот же ключ, но уже без решётки id=&quot;subj&quot;.</p>
      <pre>{`<ul>
  <!-- Ссылка с # -->
  <li class="page-item">
    <a href="#css-link">Стилизация ссылок</a>
  </li>
  <li class="page-item">
    <a href="#anchors">Якоря и сноски</a>
  </li>

  ...
</ul>
  ...
<!-- Ключ для перехода -->
<h2 id="anchors">Якоря и сноски</h2>`}
      </pre>
      <p>Но можно сослаться на якорь и с другой страницы, и с другого сайта. Тогда ссылка будет выглядеть так: URL страницы + #якорь, например: https://htmlacademy.ru/skills/....#sub.</p>
      <p>Якорь на сноску или пояснение часто делается как в текстовом документе — цифрой в верхнем индексе (<code>&lt;sup&gt;</code>...<code>&lt;sup&gt;</code>). В таком случае пользователю будет гораздо удобнее, если у сноски будет обратный якорь, возвращающий к тексту.</p>
      <pre>{`<p>Повысьте юзабильность<sup><a href="#footnote-usability" id="ref-usability">1<a></
      sup> текстовых элементов — помогите пользователю продраться через ваш текст.</p>

<section class="footnotes">
  <p><a id="footnote-usability">1</a> — удобство для пользователя. <sup><a href="#ref-usability">обратно к материалу<a></sup>
</section>`}
      </pre>
      <p>А если сносок в документе много? Можно ли автоматизировать процесс добавления сносок, чтобы не запутаться в номерах? Да, можно. Для этого используются встроенные особенности упорядоченных списков и CSS-счётчиков. Разберём всё на примере. У нас есть статья, в которой используются термины. В подвале статьи поместим список с расшифровками терминов статьи.</p>
      <p>Для начала разметим статью. Все неизвестные термины и термины, требующие пояснения, обернём в ссылку с классом footnote-label. Каждой ссылке присвоим уникальный идентификатор (id=&quot;html-ref&quot;, id=&quot;css-ref&quot;…), он нам понадобится для возвращения назад. Сноски добавим в подвал нашей статьи, и разметим их с помощью упорядоченного списка. Не забудем добавить ссылки на обратный якорь.</p>
      <img src="img/text/text-39.png" alt="" width="800" />
      <pre>{`<article>
  <h2>Полезное</h2>
  <p>Нумеровать сноски при разметке <a href="#html" class="footnote-label"
  id="html-ref">HTML</a> страницы  нет необходимости.</p>
  <p>Добавить нумерацию можно с помощью упорядоченного списка и <a href="#css"
  class="footnote-label" id="css-ref">CSS</a> <a href="#css-counters"
  class="footnote-label" id="css-counters-ref"> счётчика</a>.</p>
  <footer>
    <h3 class="visually-hidden" id="footnote-label">Сноски</h3>
    <ol>
      <li id="html">HTML (от англ. HyperText Markup Language — «язык гипертекстовой
        разметки») — стандартизированный язык разметки документов во Всемирной
        паутине. Большинство веб-страниц содержат описание разметки на языке HTML.
        Язык HTML интерпретируется браузерами; полученный в результате интерпретации
        форматированный текст отображается на экране монитора компьютера или
        мобильного устройства. <a href="#html-ref" class="back">↩</a></li>
      <li id="css">CSS (англ. Cascading Style Sheets — каскадные таблицы стилей) —
      формальный язык описания внешнего вида документа, написанного с использованием
      языка разметки.<a href="#css-ref" class="back">↩</a></li>
      <li id="css-counters">CSS счётчики — переменные CSS, значения которых могут
      быть инкрементированы при помощи CSS для отслеживания количества их
      использования. Они позволяют регулировать внешний вид контента, основываясь на
      его местоположении в документе.<a href="#css-counters-ref" class="back">↩</a></li>
    </ol>
  </footer>
</article>`}
      </pre>
      <pre>{`body {
  margin: 20px;
  font-size: 125%;
  line-height: 1.4;
  max-width: 600px;
  margin: 0 auto;
}

footer {
  margin-top: 50px;
  border-top: 1px solid silver;
  font-size: 0.8em;
}

footer ol {
  padding-left: 20px;
}

article {
  counter-reset: footnotes;            /* сбрасываем счётчик */
}

.footnote-label {
  counter-increment: footnotes;        /* увеличиваем счётчик для каждой подписи */
  text-decoration: none;               /* убираем подчёркивание для ссылки */
  color: inherit;
  cursor: default;
  outline: none;
}

.footnote-label::after {
  content: '[' counter(footnotes) ']'; /* формируем номер для сноски как '[1]' */
  vertical-align: super;               /* отображаем как верхний индекс */
  font-size: 0.5em;                    /* уменьшаем размер сноски */
  margin-left: 2px;                    /* добавляем внешний отступ */
  color: blue;
  text-decoration: underline;
  cursor: pointer;
}

.footnote-label:focus::after {
  outline: thin dotted;
  outline-offset: 2px;
}

.back {
  font-size: 0.8em;
}

footer :target {
  background: yellow;
}

.visually-hidden {
  position: absolute;
  clip: rect(0 0 0 0);
  visibility: hidden;
  opacity: 0;
}

.p {
  text-align: center;
  font-size: .75em;
  padding-top: 150px;
}`}
      </pre>
      <p>Для добавления сносок в статью используем псевдоэлемент ::after для ссылок с классом footnote-label. Номер будем формировать так: content: &apos;&lbrace;&apos; counter(footnotes) &apos;&rbrace;&apos;;. Где footnotes — это имя CSS-счётчика.</p>

      <h2>Как ставить пустые ссылки</h2>
      <pre>{'<a href="">Каталог</a>'}</pre>
      <p>Один из самых худших вариантов, так как полностью перезагружает страницу.</p>
      <pre>{'<a href="#">Каталог</a>'}</pre>
      <p>Изменяет адрес страницы, добавляет в конце #. Если было htmlacademy.ru, то после клика станет htmlacademy.ru/#. Прокручивает страницу к самому верху сайта. Если ссылка была в футере, то сайт прокрутится до самого начала. Это не всегда желательное поведение, поэтому этот вариант тоже отбросим.</p>
      <pre>{`<a href="##">Каталог</a>
      или
      <a href="#!">Каталог</a>`}
      </pre>
      <p>Эта версия лучше, чем предыдущий способ, так как страница не прокручивается вверх. При этом меняется адрес страницы, а также добавляется # в конце адреса. Этот способ работает не во всех браузерах, поэтому есть следующий.</p>
      <pre>{'<a href="#no_scroll">Каталог</a>'}</pre>
      <p>Можно сделать полноценную якорную ссылку, но при этом без элементов с id=&quot;noscroll&quot;. Этот способ работает во всех браузерах, не скроллит страницу к началу, но меняет ссылку, добавляя #noscroll в конец адреса.</p>
      <pre>{'<a href="javascript:void(0);">Каталог</a>'}</pre>
      <p>Достаточно старый способ, который благодаря JavaScript буквально просит ссылку ничего не делать. Правильнее было бы написать javascript: undefined;, но этот вариант длиннее, поэтому придумали более короткую замену void (0), который также возвращает undefined. Этот вариант был создан ещё в то время, когда JavaScript инлайнили в разметку. Ссылка в этом случае никуда не прокручивается, что лучше, чем в предыдущем варианте. Сам же метод позволял создать AJAX-запрос без перезагрузки страницы. Например, при открытии попапа делается запрос у сервера на его контент, затем попап открывается, и отрисовывается полученный контент от сервера.</p>
      <pre>{'<a href="bla-bla-bla" onclick="return false;">Ссылка</a>'}</pre>
      <p>В этом методе ничто никуда не прокручивается и не прыгает. В href можно добавить что угодно, а в JavaScript не добавлять новый onclick. Хотя раньше это было важно. Сейчас новое событие можно добавить с помощью addEventListener.</p>
      <pre>{'<a>Каталог</a>'}</pre>
      <p>В новой спецификации разрешили вообще не указывать href, если он не нужен. Ссылка как будто превращается в &lt;span&gt;: удаляется стандартное подчёркивание снизу и синий цвет, указанный по умолчанию. С такой ссылки удаляются состояния: active, focus, так как с ней нельзя взаимодействовать. Это очень хорошо, так как ссылки, действительно, пока нет. Но при этом пользовательская стилизация, которую пишете вы, продолжает работать. В целом, можно сказать, что это самый ленивый и правильный вариант, однако он не всем подходит.</p>
    </section>
  );
}

export default Links;
