import React from 'react';

function Forms() {

  return (
    <section className="conspect">
      <h1>Формы в HTML, tag <code>&lt;form&gt;</code></h1>
      <p>У тега <code>&lt;form&gt;</code> есть два важных атрибута:</p>
      <ul>
			  <li>action задаёт адрес отправки формы, URL - &quot;https://echo.htmlacademy.ru/courses&quot;;</li>
        <li>method задаёт метод отправки формы. get или post.</li>
      </ul>
      <p>Если не указать атрибут method, то будет использован get.</p>
      <p>Метод get посылает данные формы в строке запроса, то есть они видны в адресной строке браузера и следуют после знака вопроса. Например: https://www.google.com/search?q=htmlacademy</p>
      <p>Метод get лучше использовать в поисковых формах, потому что он позволяет получить ссылку на результаты поиска и передать её кому-то.</p>
      <p>Метод post посылает данные в теле HTTP-запроса и используется, когда нужно отправить много данных и ссылка на результат обработки этих данных не нужна. Например, при редактировании личного профиля.</p>

      <h2>Поля ввода <code>&lt;input&gt;</code></h2>
      <p>У тега <code>&lt;input&gt;</code> два обязательных атрибута: <span className="hl-1">type</span> задаёт тип поля, <span className="hl-2">name</span> задаёт имя поля.</p>

      <h3>Текстовое поле ввода <code>&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</code></h3>
      <p><span className="hl-3">Имя поля нужно, чтобы правильно обработать данные на сервере. Обычно, имя поля должно быть уникальным в пределах формы, хотя есть исключения. Для задания имени поля используют латинские буквы и цифры.</span></p>

      <h4>Идентификатор и значение по умолчанию</h4>
      <p>Атрибут id поля ввода обозначает идентификатор. Он <span className="hl-4">должен быть уникальным не только в пределах формы, но и на всей странице</span>.</p>
      <p>Обычно идентификаторы используют для повышения удобства работы с формой, например, создают подписи, связанные с мелкими полями. При нажатии на такие подписи активируется связанное поле. И это удобно, так как по большой подписи попасть легче, чем по маленькому полю. Также идентификаторы используют в JavaScript для работы с полями.</p>
      <p>Идентификатор в отличие от имени поля не передаётся на сервер. Лучше использовать идентификаторы, отличающиеся от имени поля, особенно актуально это для полей множественного выбора.</p>
      <p><span className="hl-5">Атрибут <i>value</i> задаёт значение поля ввода по умолчанию. Это тоже повышает удобство.</span></p>
      <p>Согласитесь, приятно зайти в огромную анкету на каких-нибудь госуслугах, а там ваши паспортные данные уже подставлены в нужные поля и заполнять их не надо. И всё благодаря тому, что программист добавил к полям атрибут <i>value</i> с нужными данными.</p>

      <h4>Подпись для поля ввода</h4>
      <p>Тег <code>&lt;label&gt;</code> связывает текст и поле ввода логически. А ещё если нажать на текст в такой подписи, то курсор переместится в соответствующее поле.</p>
      <p>2 способа связать подпись и поле ввода:</p>
      <ol>
        <li>обернуть текст подписи и тег поля в тег <code>&lt;label&gt;:</code>
          <pre>{`<code><label>
  Подпись <input type="text" name="username">
</label></code>`}
          </pre>
        </li>
        <li>связать подпись и поле по id:
          <pre>{`<code><label for="user-field-id">Имя пользователя</label>
...
другие тегов
...
<input id="user-field-id" type="text" name="username"></code>`}
          </pre>
        </li>
      </ol>

      <h3>Поле для ввода пароля</h3>
      <p><code>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</code></p>
      <p>Особенность этого поля в том, что введённый текст в нём маскируется. Обычно браузеры используют для этого звёздочки или кружочки.</p>
      <p>Чтобы показать пароль, нужно превратить поле ввода пароля в текстовое поле ввода. Для этого надо изменить его тип на text. За тип в JavaScript отвечает свойство type. Чтобы изменить тип поля ввода, нужно записать в свойство type новое значение:</p>
      <pre>{`let input = document.querySelector('input');

// Сделаем input текстовым полем ввода
input.type = 'text';`}
      </pre>

      <h3>Кнопка отправки формы</h3>
      <p><code>&lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</code></p>
      <p>Надпись на кнопке можно задать с помощью атрибута value. Для кнопки отправки формы задавать имя необязательно. Но если имя задано, то на сервер будут отправляться имя и значение кнопки.</p>
      <p>Обычно имя для кнопки отправки задают, когда в форме несколько кнопок, отвечающих за разные действия. Браузер отправляет на сервер имя и значение только той из них, на которую нажал пользователь. Таким образом, сервер может понять, какую кнопку нажали и что нужно сделать.</p>

      <h3>Многострочное поле ввода <code>&lt;textarea&gt;</code></h3>
      <p>Атрибуты name и id, которые аналогичны атрибутам текстового поля.</p>
      <p>rows определяет количество строк, а cols— количество знаков в строке.</p>
      <p>Атрибут <i>value</i> у многострочного поля отсутствует, а значение по умолчанию задаётся по-другому. Текст, расположенный между открывающим и закрывающим тегом &lt;textarea&gt; и является значением по умолчанию. Вот так: <code>&lt;textarea&gt;Значение по умолчанию&lt;/textarea&gt;</code></p>

      <h3>Чекбокс или «галочка»</h3>
      <p><code>&lt;input type=&quot;checkbox&quot; name=&quot;checkbox-1&quot;&gt;</code></p>
      <p>Галочка работает по принципу «либо да, либо нет». Если галочка стоит, то браузер посылает переменную с именем поля на сервер, если галочки нет, то не посылается ничего. Таким образом, атрибут <i>value</i> не является обязательным.</p>
      <p>Чтобы галочка стояла по умолчанию, нужно добавить к тегу атрибут <span className="hl-5">checked</span>.</p>
      <p><span className="hl-7">Имена у чекбоксов должны быть разными.</span></p>
      <p>Чтобы проверить состояние чекбокса, используем свойство checked. Это свойство имеет булево значение: true, если чекбокс включён, и false, если нет.</p>
      <pre>{`// Проверяем, включён ли чекбокс
if (showPassword.checked) {
// Инструкции выполнятся, если чекбокс включён
} else {
// Инструкции выполнятся, если чекбокс выключен
}`}
      </pre>

      <h3>Переключатель или «радиобаттон»</h3>
      <p><span className="hl-8"><code>&lt;input type=&quot;radio&quot; name=&quot;radio&quot;&gt;</code></span></p>
      <p><span className="hl-10">Атрибут <i>value</i> является для переключателей обязательным. Браузер отправляет на сервер значение <i>value</i> выбранного переключателя.</span></p>
      <p><span className="hl-9">У переключателей из одной группы должно быть одинаковое имя и разные значения, которые задаются c помощью <i>value</i>.</span></p>
      <p>Атрибут <i>checked</i> делает radio выбранным по умолчания.</p>
      <p><span className="hl-1"><i>name</i> у переключателей одной группы должно быть одинаковым, но <i>id</i> всегда должны быть уникальными.</span></p>
      <div className="note"> Хорошим тоном будет всегда прописывать стили для состояний <i>hover</i>, <i>focus</i>, <i>active</i>, <i>checked</i> и <i>disabled</i> элементам формы</div>

      <h3>Раскрывающийся список, select</h3>
      <p><span className="hl-8"><code>&lt;input type=&quot;select&quot; name=&quot;select&quot;&gt;</code></span></p>
      <p>Варианты ответов задаются с помощью парных тегов <code>&lt;option value=&quot;light&quot;&gt;Светлая тема&lt;&gt;</code></p>
      <p>В атрибуте value тега &lt;option&gt; задаётся значение варианта ответа, а внутри этого тега располагается подпись варианта ответа.</p>
      <p>Если при отправке формы у выбранного варианта задан value, то на сервер отправится значение этого атрибута. В противном случае будет отправлен текст подписи.</p>
      <p>Для выбора одновременно нескольких вариантов нужно добавить атрибут <i>multiple</i>.</p>
      <p>Выбрать несколько вариантов можно, щёлкая по ним с зажатой клавишей Ctrl на Windows или Command на MacOS.</p>
      <p>Высоту мультиселекта можно изменять с помощью атрибута <i>size</i></p>
      <p>Чтобы отметить как выбранные по умолчанию одно или несколько значений, нужно к соответствующим тегам <code>&lt;option&gt;</code> добавить атрибут <i>selected</i>.</p>
      <p>При отправке данных мультиселекта на сервер с PHP после имени в значении атрибута name ставятся символы квадратных скобок []. Например, &lt;select name=&quot;days[]&quot;&gt;. Это необязательное требование для имени мультиселекта, а нужно только для корректной обработки данных в PHP.</p>

      <h4>Группировка элементов списка</h4>
      <p>В теге <code>&lt;select&gt;</code> есть возможность объединять <i>option</i> в группы - тег <code>&lt;optgroup&gt;</code>. Атрибут label этого тега определяет заголовок группы.</p>
      <pre>{`<select name="variants">
  <optgroup label="Группа вариантов 1">
    <option value="1">Вариант 1</option>
    <option value="2">Вариант 2</option>
    <option value="3">Вариант 3</option>
  </optgroup>
  <optgroup label="Группа вариантов 2">
    <option value="4">Вариант 4</option>
    <option value="5">Вариант 5</option>
    <option value="6">Вариант 6</option>
  </optgroup>
</select>`}
      </pre>
      <p>Вложенность групп не ограничена, внутрь каждой группы можно вложить другие группы. Аналогично можно группировать элементы и в списках со множественным выбором.</p>

      <h3>Поле для загрузки файлов</h3>
      <p><code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code></p>
      <div className="note">Для этого поля обязательным атрибутом является <i>name</i>.
        <p>Чтобы поле заработало и браузер смог передать выбранный файл на сервер, необходимо добавить <b>форме</b> атрибут <i>enctype</i> со значением <i>multipart/form-data</i>.</p>
      </div>
      <p>Этот атрибут указывает браузеру, в каком виде пересылать данные. Если вы хотите отправить на сервер файл, данные из формы эффективнее всего передавать по частям. За это и отвечает значение multipart/form-data.</p>
      <p>внешний вид полей с типом file очень сильно отличается в зависимости от операционной системы и очень плохо изменяется с помощью стилей.</p>

      <h3>Скрытое поле</h3>
      <p><code>&lt;input type=&quot;hidden&quot;&gt;</code></p>
      <p>Его используют, когда в форме нужно отправить какие-то дополнительные служебные данные, которые не вводятся пользователем. Например, это могут быть реквизиты заказа или номер пользователя в форме оплаты.</p>

      <h3>Сброс введенных значений</h3>
      <p><code>&lt;input type=&quot;reset&quot;&gt; value=&quot;Сбросить&quot;</code></p>
      <p>Кнопка не обнуляет значения, а возвращает те, которые были установлены в полях формы по умолчанию.</p>

      <h3>Простая кнопка</h3>
      <p><code>&lt;input type=&quot;button&quot; value=&quot;Кнопка&quot;&gt;</code></p>
      <p>При нажатии на такую кнопку никаких действий не происходит, а все необходимые действия обычно задаются при помощи JavaScript.</p>

      <h3>Кнопка-изображение</h3>
      <p>В качестве кнопки отправки формы можно использовать изображение. Для этого у тега input нужно указать тип image. У кнопки-изображения есть два атрибута: <i>alt</i> и <i>src</i></p>
      <p>Кнопка-изображение работает аналогично кнопке submit, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.</p>

      <h3>Альтернативный способ задания кнопок</h3>
      <p>Кнопку можно создать тегом <code>&lt;button&gt;</code>. Он расширяет возможности создания кнопок.</p>
      <p>Внутри тега &lt;button&gt; можно размещать любые HTML-элементы, в том числе изображения. Например:</p>
      <p><code>&lt;button&gt;Календарь &lt;img src=&quot;calend.png&quot; alt=&quot;&quot;&gt;&lt;/button&gt;</code></p>
      <p>В атрибуте type тега &lt;button&gt; можно указать значения <i>button</i>, <i>submit</i> или <i>reset</i>, то кнопка будет отправлять данные на сервер или сбрасывать введенные значения. По умолчанию значение атрибута type — submit.</p>
      <p>Значение <i>button</i> избавит кнопку от всей изначальной функциональности. То есть кнопка просто будет выглядеть как кнопка, но ничего по умолчанию не делать. Это удобно, если вы хотите сами добавить кнопке дополнительное действие с помощью JavaScript.</p>

      <h4>Обязательные поля</h4>
      <p><code>&lt;input type=&quot;text&quot; required&gt;</code></p>
      <p>Эта проверка работает на клиентской части и упрощает валидацию форм. Но всегда нужно проверять отправленные данные и на стороне сервера.</p>
      <p>Атрибут required добавлен для полей, которые обязательны для ввода. Визуально на макете их отмечают символом *.</p>

      <h3>Поле выбора даты</h3>
      <p><code>&lt;input type=&quot;date&quot;&gt;</code></p>
      <p>При клике на данное поле в форме всплывает календарик.</p>
      <p>Если браузер не поддерживает поле для ввода даты и времени, то вместо него отображается обычное текстовое поле.</p>

      <h3>Другие поля для ввода дат</h3>
      <p>datetime-local	выбор даты с указанием времени (без учета временной зоны)</p>
      <p>week	выбор порядкового номера недели в году и года</p>
      <p>month выбор месяца и года</p>

      <h3>Поле выбора времени</h3>
      <p><code>&lt;input type=&quot;time&quot;&gt;</code></p>

      <h3>Список возможных значений</h3>
      <p>Для текстовых полей можно заранее определить список возможных значений, которые отображаются, когда вы начинаете вводить текст в поле. Для этого существует специальный тег <code>&lt;datalist&gt;</code>.</p>
      <pre>{`<input type="text" list="browsers" name="browser">
<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>`}
      </pre>
      <p>Связывание текстового поля и списка осуществляется при помощи атрибута <i>list</i>(определяет список возможных значений поля для ввода, который будет предлагаться пользователю) у тега <code>&lt;input&gt;</code> — значение <i>list</i> должно быть таким же, как значение атрибута <i>id</i> у списка.</p>
      <p>Если тег input имеет специфический тип, например email или другие, то в списке отображаются только корректные для данного типа значения.</p>

      <h3>Поле ввода числового значения</h3>
      <p><code>&lt;input type=&quot;number&quot;&gt;</code></p>
      <p>При помощи вспомогательных атрибутов <i>min</i> и <i>max</i> можно установить верхнюю и нижнюю границу допустимых значений. А атрибут <i>step</i> устанавливает величину шага изменения значения.</p>
      <p>Также стоит отметить, что поле ввода числа, как и некоторые другие поля, которые будут рассмотрены дальше, по-особому ведёт себя в мобильных браузерах: например, при фокусе на такое поле появляется клавиатура, позволяющая вводить соответствующие символы.</p>

      <h3>Поле поиска</h3>
      <p>В форму можно поместить поле поиска, чтобы можно было напечатать название и потом выбирать подходящие.</p>
      <p><code>&lt;input type=&quot;search&quot;&gt;</code></p>
      <p>Это поле почти не отличается от обычного текстового поля. В некоторых браузерах внутри него появляется крестик для сброса введённого значения.</p>

      <h2>Автофокус</h2>
      <p>При загрузке страницы можно сообщить браузеру в какое поле установить курсор по умолчанию.</p>
      <p><code>&lt;input type=&quot;text&quot; autofocus&gt;</code></p>
      <p>Автофокус улучшает процесс работы с формами, ведь пользователь избавляется от лишних щелчков мышки, там где они не нужны, а может сразу начинать вводить текст в поле.</p>
      <div className="warn">Обратите внимание, что такой атрибут должен быть только один на странице.</div>

      <h3>Выбор из диапазона - тип поля range</h3>
      <p>Такое поле выглядит как шкала с ползунком и позволяет выбрать число из некоторого интервала значений.</p>
      <p><code>&lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;</code></p>
      <p>Атрибуты min и max устанавливают нижнюю и верхнюю границу допустимых значений. А атрибут step устанавливает величину шага изменения значения.</p>

      <h3>Область для вывода результата</h3>
      <p>Тег &lt;output&gt; представляет собой область, куда выводятся какие-либо результаты вычислений, обычно полученные при помощи JavaScript.</p>
      <p><code>&lt;output name=&quot;sum&quot;&gt;[значение по умолчанию]&lt;/output&gt;</code></p>
      <p>Значение по умолчанию при этом можно не задавать, тогда область вывода будет пустой.</p>

      <h3>Группировка полей формы</h3>
      <p>Для группировки полей используется тег <code>&lt;fieldset&gt;</code>.</p>
      <p>По умолчанию браузеры отображают результат в виде рамки вокруг этой группы полей, но при помощи CSS можно изменить его внешний вид.</p>
      <p>Для группы полей можно добавить заголовок. Для этого внутрь тега fieldset надо поместить тег <code>&lt;legend&gt;</code>: <code>&lt;legend&gt;Заголовок группы&lt;/legend&gt;</code></p>

      <h4>Паттерны значений полей</h4>
      <p>Атрибут pattern, в котором с помощью регулярного выражения опишем требуемый формат.</p>

      <h3>Поле ввода телефона</h3>
      <p>Новый тип поля tel появился в HTML5 и отвечает за ввод телефонных номеров.</p>

      <h2>Подсказка при заполнении полей</h2>
      <p><code>&lt;input type=&quot;text&quot; placeholder=&quot;Текст подсказки&quot;&gt;</code></p>
      <p>Текст подсказки выводится внутри текстового поля, а при вводе значения — автоматически убирается.</p>
      <div className="note">В HTML5 добавлены два типа полей email и url, предназначенные для ввода электронной почты и адреса сайта. Особенностью этих полей является то, что они автоматически проверяют формат введённых данных.</div>
      <p>Когда вы начинаете заполнять такое поле на мобильнике, там автоматически переключается раскладка клавиатуры. Например, для email отобразятся латинские символы, цифры, знак @ и некоторые другие.</p>

      <h3>Поле выбора цвета</h3>
      <p>В HTML5 добавили новый тип color, предназначенный для полей выбора цвета. При клике на такое поле появляется окно с возможностью выбрать цвет из палитры.</p>
      <p><code>&lt;input type=&quot;color&quot;&gt;</code></p>

      <h4>Запрет редактирования полей</h4>
      <p>Есть два способа: использование атрибута <i>readonly</i> и использование атрибута <i>disabled</i></p>
      <p>Атрибут readonly не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Введенное значение можно выделить и скопировать. Данные из этого поля отправляются на сервер.</p>
      <p>Атрибут disabled не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Нельзя поставить фокус в это поле, введенное значение нельзя выделять и копировать. Данные из этого поля НЕ отправляются на сервер.</p>

      <h2>Управление автозаполнением полей</h2>
      <p>Параметрами автозаполнения можно управлять используя атрибут autocomplete.</p>
      <p>Он может принимать два значения on и off. Первое включает автозаполнение, второе — отключает. Отключение автозаполнения обычно используется из соображений безопасности, например, чтобы не сохранялись пароли, номера банковских карт и так далее.</p>

      <h2>Переключение между полями</h2>
      <p>При нажатии клавиши Tab браузер передает управление (фокус) от одного элемента к другому в том порядке, в котором они были объявлены на странице. Этим порядком можно управлять при помощи атрибута tabindex.</p>
      <p><code>&lt;input type=&quot;text&quot; tabindex=&quot;3&quot;&gt;</code></p>
      <p>В качестве значения может использоваться любое целое положительное число. Значения выстраиваются последовательно и переход между элементами происходит от меньшего значения к большему.</p>
      <p><span className="hl-1">Если представлено отрицательное значение — элемент может быть выделен, однако не участвует в последовательной навигации.</span></p>
      <p>Если представлен 0 — элемент может быть выделен и достигнут с помощью последовательной навигации, однако порядок навигации определён платформой.</p>
      <div className="warn">Из соображений доступности не рекомендуется менять порядок навигации по полям ввода по умолчанию.</div>

      <h2>localStorage</h2>
      <p>Суть localStorage или «локального хранилища» заключается в том, что в него можно записывать данные, которые будут сохраняться в браузере. Эти данные не исчезнут даже если вы закроете браузер и откроете его снова или уйдете со страницы и потом вернётесь на неё.</p>
    </section>
  );
}
export default Forms;
