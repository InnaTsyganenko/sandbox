import React from 'react';

function StylingSelect() {

  return (
    <section className="conspect">
      <h1>Как стилизовать <code>select</code></h1>
      <h2>Почему нативные селекты превосходны</h2>
      <p>Когда пользователь кликает на селект, браузер начинает вести себя не как обычно, чтобы отобразить варианты для выбора. Если на сайте есть селект, который расположен в самом низу, у нижнего края браузера, то при щелчке на такой селект браузер присваивает ему z-index, который может накладываться на все другие z-index, и даже может отрисовать список вариантов за границами окна.</p>
      <p>Если селект не стандартный браузерный, а кастомный, то он может не сработать. Вы бы не увидели список вариантов — он бы просто обрезался границей окна браузера. Было бы даже непонятно, нажалась кнопка или нет.</p>
      <p>Ещё одна интересная тема — как селекты ведут себя в тач-устройствах и ОС.</p>
      <ul>
        <li>Никогда не соглашайтесь на полную кастомизацию. Браузеры особым, трепетным, образом обрабатывают элементы <code>&lt;select&gt;</code> — старайтесь всегда сохранять это поведение. Поэтому для создания нестандартного поля выбора нужно использовать тег <code>&lt;select&gt;</code>. Нужно донести до дизайнера все минусы полной кастомизации, под которой подразумевается отказ от <code>&lt;select&gt;</code></li>
        <li>Когда вы убедили дизайнера использовать <code>&lt;select&gt;</code>, следует перейти к объяснению того факта, что контролировать внешний вид выпадающего списка вариантов вы не можете. Это дело браузера. Точка. Контролировать можно только вид кнопки для открытия списка.</li>
        <li>На следующем шаге нужно решить, используете ли вы стандартный селект или всё-таки кастомизируете кнопку для открытия списка. И если кастомизируете кнопку, то в каком стиле — с одной стрелкой, как в Windows, или с двумя в стиле Apple? Применение второго варианта приведёт к путанице для пользователей Windows, которые привыкли к «однострелочному» варианту. Детектирование браузера — отдельная тема. С точки зрения UX куда более мудрым решением будет использование стандартной «нестилизованной» версии селекта — она будет адаптироваться к любым ОС и браузерам, а у пользователей не возникнет никаких трудностей.</li>
      </ul>

      <h2>Гибридная техника</h2>
      <p>Гибридная техника заключается в использовании контейнера-обёртки для элемента <code>&lt;select&gt;</code>. Назовём этот контейнер .selectContainer. Он должен иметь overflow-x: hidden;, а у элемента <code>&lt;select&gt;</code> внутри контейнера должна быть ширина около 160%, чтобы скрыть «дефолтные» стрелки браузера или ОС. Контейнер используется, чтобы создать для пользователя иллюзию взаимодействия с обычным <code>&lt;select&gt;</code>. В примере ниже в псевдоэлементе ::after контейнера .selectContainer стоит просто текст «icon», но его можно было бы заменить фоновым изображением:</p>
      <img src="img/styling-select-1.png" alt="" width="800" />
      <p>Чтобы решить, использовать ли стандартные или кастомные селекты, нужно задать себе (или дизайнеру) вопрос:</p>
      <p>«Будет ли <code>&lt;select&gt;</code> включать большое количество опций? Что может пойти не так? Будут ли все варианты видны в открытом списке вариантов?» Если ответ «нет», то следует использовать стандартную нестилизованную или элегантную гибридную версию. Если ответ положительный, то стоит назвать ваш элемент «блоком с выпадающими вариантами» и оформить его так, чтобы не было даже намёка на сходство со стандартными селектами и их поведением.</p>
      <p>Если при создании раскрывающихся списков не использовать элемент <code>&lt;select&gt;</code>, то страдает семантика и уровень доступности интерфейса для пользователей. Изменение внешнего вида элементов форм нежелательно для людей со слабым зрением. Отказ от <code>&lt;select&gt;</code> также усложняет чтение с экрана.</p>
    </section>
  );
}
export default StylingSelect;
