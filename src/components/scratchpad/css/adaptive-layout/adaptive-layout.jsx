import React from 'react';

function AdaptiveLayout() {

  return (
    <section className="conspect">
      <h1>Адаптивная, резиновая, отзывчивая вёрстка.</h1>
      <p><a href="http://bradfrost.github.io/this-is-responsive/" target="_blank" rel="noopener noreferrer">Patterns and resources for creating responsive web experiences.</a></p>
      <p><a href="https://frontender.info/adaptive-vs-responsive-terminology/" target="_blank" rel="noopener noreferrer">Адаптивно-отзывчивый: разбираемся в терминологии</a></p>
      <p><a href="https://marketing.by/novosti-rynka/osnovnye-printsipy-otzyvchivogo-veb-dizayna-pokazali-v-gif/" target="_blank" rel="noopener noreferrer">Основные принципы «отзывчивого» веб-дизайна показали в GIF</a></p>
      <p><a href="https://habr.com/ru/company/yandex/blog/307064/" target="_blank" rel="noopener noreferrer">Делать ли мобильную версию? 5 распространенных проблем, которые решает адаптивная верстка. Опыт Яндекса</a></p>
      <p>Адаптивная вёрстка - это когда у нас есть разные величины экранов, например - мобильная, планшетная, десктопная. При промежуточных состояниях макет при этом не тянется. Если ширина внешнего контейнера зафиксирована — это уже фикс, сколько бы ни было резины внутри. В общем, главное чтобы сайт двигался так или иначе вместе с окном, а не торчал кирпичом где-то в центре или с краю.</p>
      <p>Резиновая вёрстка - когда макет тянется между состояниями, использует всё доступное расстояние. Задаёте всему макету и отдельным его частям ширину в процентах. За исключением минимальной и максимальной ширины. Высоту в вебе в принципе не принято задавать — обычно она подстраивается под содержимое.</p>
      <p>Одной из первых, в 2006 году появилась техника адаптивной раскладки Марка ван ден Доббельстина. В статье на <a href="https://alistapart.com/article/switchymclayout/" target="_blank" rel="noopener noreferrer">A List Apart</a> Марк предложил добавлять классы при загрузке или ресайзе окна и на каждый диапазон вешать стили. До первой реализации медиавыражений в Safari оставалось два года.</p>
      <p>Когда в начале десятых годов появилось для чего адаптировать и чем адаптировать — мобильные браузеры и медиавыражения — вышли книги, давшие названия подходам: <a href="https://adaptivewebdesign.info/" target="_blank" rel="noopener noreferrer">«Адаптивный веб-дизайн»</a> Аарона Густавсона и <a href="mann-ivanov-ferber.ru/books/book-apart/otzivchivij-web-design/" target="_blank" rel="noopener noreferrer">«Отзывчивый веб-дизайн»</a> Итана Маркота. Подходы Аарона и Итана продолжали идеи Марка, но с более современными технологиями и несколько отличались направлением мысли.</p>
      <p>«Адаптивный веб-дизайн» Аарона предлагал гибко адаптировать сайты к возможностям устройств и браузеров. Важной частью этой философии был ненавязчивый JavaScript с прогрессивным улучшением — и всё это поверх семантической разметки. Хотя Аарон писал не совсем об этом, сегодня принято считать, что главное в адаптивной вёрстке — привязка к конкретным разрешениям и устройствам. Стили переключаются от одного брейкпоинта к другому, то есть у вас есть фиксированные макеты для iPad и iPhone, а то, что между ними вас не волнует.</p>
      <p>«Отзывчивый веб-дизайн» Итана ставил во главу три вещи: резиновый макет, гибкие картинки и медиавыражения. Все размеры и отступы Итан предлагал указывать в процентах с сумасшедшими дробями для точности. Отличительной чертой подхода стало плавное изменение сайта, с ориентацией не на конкретные устройства, а на содержимое. То есть ваш резиновый макет хорошо выглядит не только на iPhone и iPad, но и в любой точке между ними.</p>
      <p>Чуть позже Итан сформулировал ещё один важный принцип в книге <a href="https://www.mann-ivanov-ferber.ru/books/book-apart/mobilfirst/" target="_blank" rel="noopener noreferrer">«Сначала мобильные»</a>. Если до тех пор отправной точкой для адаптации вёрстки служила десктопная версия, то он предложил перевернуть схему и начинать с мобильной версии, а потом её улучшать. Почему так? Потому, что усложнять простое проще, чем упрощать сложное. А ещё потому, что нет соблазна просто спрятать сложно адаптируемое и обделить мобильных пользователей.</p>
      <p>Да и принцип дискретной адаптации от размеров устройств и без резины имел смысл лет 10 назад. При сегодняшнем разнообразии устройств полагаться на конкретные размеры и жёстко переключаться между ними — значит однажды очень больно промахнуться. Притом, никто вам не мешает при полностью резиновой вёрстке дописывать адаптацию под нужные разрешения.</p>
      <p>Ну и как теперь верстать? Сначала делаете мобильный резиновый макет, который хорошо вписывается в небольшие устройства. А когда размеры экрана или окна начинают расти — начинаете использовать появившееся пространство для улучшения интерфейса. Появляется боковая колонка, вторая, растут размеры картинок и подгружаются новые разрешения и так далее. То есть медиавыражения меняют стили не когда вы дошли до экрана самого модного телефона, а когда это нужно для содержимого сайта и удобства пользователя.</p>

      <h2>Адаптивная графика</h2>
      <p className="hl-8">background-size: cover; - задавать для бэкграундных картинок для &quot;резиновости&quot;.</p>
      <p>Текст всегда может поменяться, поэтому лучше не задавать текстовым блокам фиксированную ширину. Добавляем margin.</p>
    </section>
  );
}
export default AdaptiveLayout;
