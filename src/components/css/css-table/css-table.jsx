import React from 'react';

function CSSTable() {

  return (
    <section className="conspect">
      <h1>CSS-таблица - <code>display: table;</code></h1>
      <p>Любому блоку можно задать <code>display: table;</code> и он будет отображаться таблицей.</p>

      <p>Ряды и ячейки таблицы - свойства <code>display: table-row и table-cell</code></p>
      <p>Мы можем одновременно и иметь семантическую разметку, и отображать её таблицей, если захотим. А в случае необходимости, можно просто отменить display: table, назначив другое подходящее значение display: например, block. Это ключевое преимущество перед HTML-таблицами, у которых изменить отображение на «нетабличное» нельзя.</p>
      <p>Заголовок таблицы - <code>display: table-caption;</code>. В HTML-таблице тег заголовка располагается внутри неё, в CSS-таблице это так же.</p>
      <p>Также к заголовкам CSS-таблиц применимо свойство для вертикального позиционирования заголовка таблицы caption-side.</p>
      <p>Группировка верхних рядов и ячеек - <code>display: table-header-group;</code></p>
      <p>Блок, которому задано это свойство, всегда отображается вверху CSS-таблицы, даже если в разметке он идёт не первым. Это поведение идентично тегу <code>&lt;thead&gt;</code>.</p>
      <p>Группировка нижних рядов и ячеек - <code>display: table-footer-group;</code>. Как и в случае «шапки», в таблицу можно включать несколько «подвалов» одновременно. Аналогично «шапке», блок, которому задано свойство display: table-footer-group, всегда отображается снизу CSS-таблицы, даже если в разметке он идёт не последним.</p>
      <p>Группировка основных рядов и ячеек - <code>display: table-row-group;</code></p>
      <p>В итоге мы получим CSS-аналог следующей табличной разметки:</p>
      <pre>{`<table>
  <caption>Вещи в дорогу</caption>
  <thead>
    <tr>…</tr>
  </thead>
  <tbody class="content">
    <tr>…</tr>
  </tbody>
  <tbody class="content content-important">
    <tr>…</tr>
  </tbody>
  <tfoot>
    <tr>…</tr>
  </tfoot>
</table>`}
      </pre>
      <p>Колонка таблицы - <code>display: table-column;</code></p>
      <p>В HTML-таблицах для стилизации столбцов используется тег <code>&lt;col&gt;</code>. Тег пишется в начале таблицы и не закрывается. Первый <code>&lt;col&gt;</code> в разметке влияет на каждую первую ячейку в рядах таблицы, то есть, на первый столбец. Следующий <code>&lt;col&gt;</code> будет стилизовать второй столбец и так далее.</p>
      <p>В примере ниже ячейкам 1.1 и 1.2 (первый столбец) задаётся ширина 20%, а ячейкам 2.1 и 2.2 (второй столбец) ширина — 80%:</p>
      <pre>{`<table>
  <col width="20%">
  <col width="80%">
  <tr>
    <td>1.1</td> <td>2.1</td>
  </tr>
  <tr>
    <td>1.2</td> <td>2.2</td>
  </tr>
</table>`}
      </pre>
      <p>В CSS-таблицах всё так же: внутри таблицы нужно создать пустой тег и задать ему свойство display: table-column — это аналог тега <code>&lt;col&gt;</code>. Правила для него будут применяться к первому столбцу, следующий элемент с table-column стилизует второй столбец и так далее.</p>
      <p>Группировка колонок таблицы - <code>display: table-column-group;</code></p>
      <p>Группа столбцов создаётся свойством display: table-column-group (аналог тега <code>&lt;colgroup&gt;</code>). Стилизуя группу, мы задаём правила для каждого дочернего столбца.</p>
      <p>Строчная таблица - <code>display: inline-table;</code></p>

      <h2>display: inline-table</h2>
      <p>Таблицы при этом имеют свой собственный тип table, но ведут себя в потоке документа как блоки, то есть занимают отдельную строку. Существует ли возможность сделать таблицу «строчной», чтобы она располагалась в одной строке с другими строчными элементами? Да! И такое поведение таблицы задаётся свойством display: inline-table.</p>
      <p>Горизонтальное выравнивание таблицы - <code>margin: auto;</code></p>
      <p><span className="hl-7">Лёгкий способ горизонтально отцентровать блок произвольной ширины на странице — присвоить ему отображение таблицей и задать margin: auto. В этом таблица схожа по поведению с обычным блочным элементом с фиксированной шириной, но при этом ширина таблицы может быть динамической.</span></p>

      <h3>Горизонтальное и вертикальное выравнивание</h3>
      <p>Пользуясь особенностями таблиц можно легко отцентровать по вертикали и горизонтали блок произвольной ширины и высоты.</p>
      <p>Трюк строится на той особенности, что ячейка растягивается на всю ширину таблицы, а содержимое ячейки просто центруется внутри неё с помощью свойств text-align и vertical-align. Для этого нужны:</p>
      <ul>
        <li>контейнер-таблица display: table;</li>
        <li>ячейка с содержимым display: table-cell;</li>
        <li>горизонтальное и вертикальное выравнивание ячейки внутри таблицы.</li>
      </ul>
      <p>Такой приём удобен, если нужно отцентровать какой-либо блок, например, модальное окно на странице.</p>

      <h3>Ячейки и границы таблицы - border-collapse и border-spacing</h3>
      <p>Свойство border-collapse «схлопывает» границы ячеек, а border-spacing — определяет расстояние между ячейками внутри таблицы.</p>
      <p><span className="hl-2">Однако, у свойства border-spacing есть одна тонкость. Если в нём задано одно значение, то расстояние между ячейками устанавливается одновременно по вертикали и горизонтали. Если значений два, то первое определяет горизонтальное расстояние, а второе — вертикальное. И это свойство действует только на элемент display: table;. На ячейках и рядах не работает.</span></p>
      <p>Свойство border работает только на ячейках. На рядах и самой таблице не работает.</p>

      <h3>Holy Grail</h3>
      <p>Так называемая разметка «Holy Grail» — это вариант разметки страницы с шапкой, тремя равными по высоте колонками (две фиксированные боковые колонки и тянущийся центр) и прилипающим подвалом. Центральная колонка должна тянуться, а боковые — иметь фиксированную ширину.</p>
      <p>Для реализации «прилипающего» подвала воспользуемся CSS-таблицами. Для начала зададим главному контейнеру табличное отображение и 100% ширину и высоту.</p>
      <p>Чтобы блок был 100% высоты области просмотра, всем его родительским элементам (в нашем случае html и body) тоже должна быть задана 100% высота.</p>
      <p>Теперь давайте шапку и подвал сделаем рядами нашей табличной разметки. Это даст особый эффект: ряды растянутся и заполнят всю ширину и высоту таблицы, а последний ряд выровняется по нижней части таблицы — это то, что нам нужно.</p>
      <p>Теперь остаётся только задать нужную высоту шапки и подвала. Её можно задать минимально необходимой, например, будет достаточно 1px. В результате вычисленная высота ряда станет минимальной, но не будет меньше высоты его содержимого.</p>
      <p>Таким образом, наш «прилипающий» подвал будет работать как следует.</p>
      <p>Теперь разберёмся со столбцами нашей разметки.</p>
      <p>Блок main также отобразим таблицей, вложенной в .table-layout. Дочерние блоки main сделаем ячейками таблицы, чтобы расположить их в ряд. И, наконец, растянем main на 100% доступной ширины и высоты, и вместе с main растянутся ячейки.</p>
      <p>Такая разметка main очень гибкая: можно без проблем менять ширину боковых столбцов, при этом основная колонка будет занимать всю оставшуюся ширину.</p>
    </section>
  );
}
export default CSSTable;
