import React from 'react';

function MethodsForConstructingGridsOnFlexboxes() {

  return (
    <section className="conspect">
      <h1>Методика построения сеток на флексах</h1>
      <p><a href="https://frontender.info/a-guide-to-flexbox/" target="_blank" rel="noopener noreferrer">Полное руководство по Flexbox</a></p>
      <p><a href="https://css-live.ru/articles/vizualnoe-rukovodstvo-po-svojstvam-flexbox-iz-css3.html" target="_blank" rel="noopener noreferrer">Визуальное руководство по свойствам Flexbox из CSS3</a></p>
      <p><a href="http://flexboxfroggy.com/#ru" target="_blank" rel="noopener noreferrer">FLEXBOX FROGGY</a></p>
      <p>Сеткой или раскладкой обычно называют взаимное расположение крупных визуальных блоков на странице.</p>
      <p>Можно мысленно разделить макет на непересекающиеся прямоугольники. Сначала вы получите самые крупные области. Потом эти крупные области можно разделить на области поменьше и так далее до мельчайших прямоугольников, которые выделяют отдельные слова или элементы страницы.</p>
      <img src="img/flex/grid-1.png" alt="Схема страницы" width="800" />
      <p>К сетке относят самые крупные области макета, примерно до 3 уровня вложенности. Более мелкие блоки, такие как карточки товаров, номера страниц в переключателе, пункты меню, ссылки на страницы социальных сетей и так далее — это уже мелкие блоки, они относятся к микросеткам.</p>
      <p>В методике мы разберём, как построить крупную сетку и сделаем «скелет» для микросетки. Также мы предусмотрим разные варианты «переполнения» сетки. Это когда содержимого в прямоугольнике сетки становится больше, чем предполагалось в дизайне, либо когда в сетке меняется количество колонок. Сетка при этом должна гибко подстроиться под новые условия и не ломаться.</p>
      <p>Когда мы делаем сетки на flex:</p>
      <ul>
        <li>Нам нужно, чтобы элементы выстраивались в колонки. Во флексбоксе это есть «из коробки» — флекс-элементы по умолчанию выстроены в ряд.</li>
        <li>Нам нужно с точностью до пикселя управлять шириной каждой колонки и отступами между ними. Это тоже достаточно легко сделать с помощью флексбоксов, потому что по умолчанию размеры флекс-элементов рассчитываются с помощью обычной блочной модели. Просто эта модель сделана гибче и при желании её поведение можно усложнять.</li>
      </ul>

      <h2>Выстраиваем горизонтальные блоки</h2>
      <p>Это могут быть колонки в сетке, элементы горизонтального меню, элементы управления в плеере, карточки товаров, фильтры в каталоге и так далее. Разберём всё на примерах.</p>
      <h3>Пример 1</h3>
      <p>Построим сетку для шапки сайта. Этот блок содержит в себе логотип, главное меню и меню пользователя.</p>
      <img src="img/flex/grid-3.png" alt="Сетка шапки сайта" width="800" />
      <pre>{`<header class="main-header">
  <div class="container">
    <nav class="main-navigation">
      <a href="index.html"><img src="/assets/img/logo.svg" width="110" height="30" alt="Логотип"></a>
      <ul class="site-navigation">…</ul>
    </nav>
    <ul class="user-navigation">…</ul>
  </div>
</header>`}
      </pre>
      <p>В контейнере-центровщике выстраиваем блоки .main-navigation и .user-navigation в ряд с помощью display: flex. Эти блоки относятся к крупной сетке.</p>
      <p>Блокам в такой сетке важно ограничить или зафиксировать ширину. Почему? Может измениться количество пунктов меню или размеры логотипа. Сетка должна предусматривать эти изменения и не должна сломаться. Подробно про переполнение мы поговорим позже в 5 шаге методики.</p>
      <img src="img/flex/grid-4.png" alt="Сетка шапки сайта" width="800" />
      <p>Для главной навигации укажем ширину 800px. Зададим ширину для навигации по сайту 445px.</p>
      <p>Блоки в контейнере выровнены по ширине, поэтому используем тип выравнивания по главной оси justify-content со значением равным space-between. Чтобы получить это же выравнивание блоков, можно использовать автоматический внешний отступ слева для блока с пользовательской навигацией.</p>
      <p>Внутри блока с главной навигацией между логотипом и навигация по сайту отступ равный 265px. В стилях укажем внешний отступ слева для блока с навигацией по сайту. Значение ширины для блоков и отступы мы замерили в макете.</p>
      <p>Собираем всё вместе и получаем такие CSS-правила:</p>
      <pre>{`.main-header .container {
  display: flex;
  justify-content: space-between;
}

/* альтернативный вариант */
.main-header .container {
  display: flex;
}

.user-navigation {
  margin-left: auto;
}

/* ещё один альтернативный вариант */
.main-navigation {
  display: flex;
  width: 800px;
}

.site-navigation {
  width: 445px;
  margin-left: 265px;
}`}
      </pre>
      <h3>Пример 2</h3>
      <p>Построим сетку для типичного информационного раздела сайта с текстом и картинкой.</p>
      <p>Содержимое раздела выстроено в две колонки. Ширина первой колонки 670px, второй — 500px. Для того чтобы два блочных элемента выстроить в ряд, используем display: flex, направление главной оси флексбокса оставим по умолчанию. Колонки выровнены по ширине, поэтому укажем тип выравнивания по главной оси justify-content равным space-between.</p>
      <img src="img/flex/grid-5.png" alt="Сетка информационного блока" width="800" />
      <p>И для нашей разметки:</p>
      <pre>{`<section class="symptoms">
  <div class="container">
    <div class="column1">
      <h2>Что из этого списка вы находите у себя?</h2>
      …
    </div>
    <div class="column2">
      …
    </div>
  </div>
</section>`}
      </pre>
      <p>Получаем следующие CSS-правила:</p>
      <pre>{`.symptoms .container {
  display: flex;
  justify-content: space-between;
}

.column1 {
  width: 670px;
}

.column2 {
  width: 500px;
}`}
      </pre>
      <h3>Пример 3</h3>
      <p>Псевдоэлементы ::before и ::after для тега с display: flex ведут себя также как и флекс-элементы внутри флекс-контейнера.</p>
      <p>Рассмотрим пример. Необходимо построить сетку для блока с номером телефона и выстроить в ряд два блока: изображение телефона и текст с номером.</p>
      <img src="img/flex/grid-6.png" alt="Сетка блока с номером телефона" width="800" />
      <p>Изображение телефона — это декоративное изображение и может быть добавлено на страницу с помощью псевдоэлемента before для тега <code>&lt;a&gt;</code>.</p>
      <p>Разметка элемента с номером телефона будет выглядеть так:</p>
      <pre>{'<a href="tel:88000000000">8 800 000-00-00</a>'}</pre>
      <p>Стили для оформления номера телефона:</p>
      <pre>{`a::before {
  content: "";
  width: 30px;
  height: 30px;
  background-image: url("img/phone.svg");
}`}
      </pre>
      <p>Если указать для тега <code>&lt;a&gt;</code>display: flex, то изображение телефона и номер выстроятся в ряд, что и требуется в макете.</p>
      <pre>{`a {
  display: flex;
}`}
      </pre>

      <h2>Создаём многострочную сетку с помощью flex-wrap</h2>
      <p>Сетка такого типа может использоваться в каталоге, где однотипные карточки товаров выстроены в несколько рядов, в галерее картинок и так далее.</p>
      <p>В примере ниже мы добавили контейнер-центровщик, определили две колонки для сетки, задали им ширину и тип выравнивания вдоль главной оси. Как обычно, все размеры были получены из макета:</p>
      <img src="img/flex/grid-7.png" alt="Сетка страницы с карточками товаров и фильтром" width="800" />
      <pre>{`<section class="catalog-category">
  <div class="container">
    <div class="filters">
      …
    </div>
    <div class="catalog">
      …
      <ul class="catalog-list">
        <li class="catalog-item">…</li>
        <li class="catalog-item">…</li>
        …
      </ul>
    </div>
  </div>
</section>

.catalog-category .container {
  display: flex;
  justify-content: space-between;
}

.filters {
  width: 230px;
}

.catalog {
  width: 836px;
}`}
      </pre>
      <p>Далее нам нужно сделать «скелет» микросетки для карточек товаров в правой колонке.</p>
      <p>Поскольку мы имеем дело с микросетками, нам нужно учитывать, что элементов в блоке может быть сколько угодно. Также учтём, что ширина элемента зависит от его контента. То есть если контента станет много или он будет широким, то сетка может сломаться. Поэтому зафиксируем ширину карточки для надёжности. Значение берём из макета: width: 252px;.</p>
      <p>Для элемента catalog-list задаём тип отображения flex. Значение выравнивания вдоль главной оси оставим по умолчанию, то есть flex-start. Поскольку в нашем случае микросетка строится для списка <code>&lt;ul&gt;</code>, нам необходимо дополнительно сбросить стили списка по умолчанию и обнулить внутренние и внешние отступы.</p>
      <pre>{`.catalog-list {
  display: flex;
  padding: 0;
  margin: 0;

  list-style: none;
}

.catalog-item {
  width: 252px;
}`}
      </pre>
      <p>В браузере это будет выглядеть так:</p>
      <img src="img/flex/grid-8.png" alt="Сетка страницы с карточками товаров" width="800" />
      <p>Блоки расположились в ряд. Далее давайте разрешим перенос элементов на новую строку и затем укажем внешние отступы снизу и справа.</p>
      <pre>{`.catalog-list {
  display: flex;
  flex-wrap: wrap;
  padding: 0;
  margin: 0;

  list-style: none;
}

.catalog-item {
  width: 252px;
  margin-bottom: 24px;
  margin-right: 40px;
}`}
      </pre>
      <p>Вот что получилось:</p>
      <img src="img/flex/grid-9.png" alt="Сетка страницы с карточками товаров" width="800" />
      <p>Необходимое количество карточек не уместилось в ряд из-за заданного отступа справа. Можно решить проблему двумя способами:</p>
      <ol>
        <li>Сбрасываем у последнего элемента в каждом ряду внешний отступ справа. К примеру, так отступ справа сбросится у каждого третьего элемента:
          <pre>{`.catalog-item:nth-child(3n) {
  margin-right: 0;
}`}
          </pre>
          <p>Минус этого способа — мы привязываемся определённому числу элементов в ряду.</p>
        </li>
        <li>У контейнера с карточками задаём отрицательный отступ справа на величину отступа карточки. Этим действием мы создаём у контейнера небольшой «расширяющий карман», чтобы все три карточки с заданным отступом стали в ряд.
          <pre>{`.catalog-list {
  margin-right: -40px;
}`}
          </pre>
          <p>После этого карточки встают на место:</p>
          <img src="img/flex/grid-10.png" alt="Сетка страницы с карточками товаров" width="800" />
        </li>
        <li>
          <p>используется механизм выравнивания элементов вдоль главной оси флексбокса — justify-content. Давайте оставим в разметке 4 карточки, уберём у них отступы, у флекс-контейнера оставим перенос на элементов на новую строку:</p>
          <pre>{`.catalog-list {
  display: flex;
  flex-wrap: wrap;
  padding: 0;
  margin: 0;
  list-style: none;
}
.catalog-item {
width: 220px;
}`}
          </pre>
          <p>Далее контейнеру зададим значение justify-content: space-between;, которое равномерно распределяет карточки внутри контейнера и тем самым автоматически создаёт отступы между элементами.</p>
          <pre>{`.catalog-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;

  padding: 0;
  margin: 0;
  list-style: none;
}

.catalog-item {
  width: 220px;
}`}
          </pre>
          <p>Проблема этого метода в его неуниверсальности. Например, в случае пяти карточек, они будут располагаться не так, как предполагалось:</p>
          <img src="img/flex/grid-11.png" alt="Сетка страницы с карточками товаров" width="800" />
        </li>
      </ol>

      <h2>Проверяем сетку на переполнение</h2>
      <p>При проектировании сетки сайта необходимо учитывать различные варианты переполнения контента. Это особенно важно при заполнении сайта через систему управления контентом (CMS). Контент-менеджер сайта может добавить новый элемент в навигацию по сайту, изменить название пункта меню, поменять логотип на изображение с «неподходящими» размерами или добавить карточки товаров. Эти и подобные действия не должны «сломать» сетку сайта. Рассмотрим типичные случаи переполнения контента.</p>
      <h3>Случай 1. Изменение размера элемента в сетке</h3>
      <p>В шапке сайта размещаются логотип и меню. С помощью флексбокса они выстроены в ряд.</p>
      <img src="img/flex/grid-12.png" alt="Сетка шапки страницы" width="800" />
      <pre>{`<nav class="main-navigation">
  <a class="main-header-logo" href="index.html"><img src="/assets/intensives/htmlcss/29/book/img/logo.svg" width="110" height="30" alt="Логотип"></a>
  <ul class="site-navigation">…</ul>
</nav>
.main-navigation {
  display: flex;
}`}
      </pre>
      <p>Логотип увеличился в размерах.</p>
      <img src="img/flex/grid-13.png" alt="В сетке шапки страницы изменился размер логотипа" width="800" />
      <p>При этом нарушилось вертикальное выравнивание элементов. Поправить ситуацию можно с помощью свойства align-item: flex-start у флекс-контейнера.</p>
      <pre>{`.main-navigation {
  display: flex;
  align-items: flex-start;
}`}
      </pre>
      <p>После этого сетка сайта будет выглядеть так:</p>
      <img src="img/flex/grid-14.png" alt="Блоки в сетке шапки выровнены к началу поперечной оси" width="800" />
      <p>Все элементы выровнены к началу поперечной оси флекс-контейнера и изменение размеров одного из флекс-элементов не приведёт к тому что вёрстка будет выглядеть «поломанной».</p>
      <h3>Случай 2. Изменение количества элементов в сетке</h3>
      <p>Продолжим рассматривать предыдущий пример с шапкой, включающей логотип и список навигационных ссылок. Сетка в меню тоже сделана с помощью флекбоксов.</p>
      <pre>{`<header class="main-header">
  <nav class="main-navigation">
    <a class="main-header-logo" href="index.html">
      <img src="/assets/intensives/htmlcss/29/book/img/logo.svg" width="111" height="24" alt="Логотип барбершопа «Бородинский»">
    </a>
    <ul class="site-navigation">
      <li><a href="info.html">Информация</a></li>
      <li><a href="news.html">Новости</a></li>
      <li><a href="price.html">Прайс-лист</a></li>
      <li><a href="catalog.html">Магазин</a></li>
      <li><a href="contacts.html">Контакты</a></li>
    </ul>
    <ul class="user-navigation">
      <li><a class="login-link" href="login.html">Вход</a></li>
    </ul>
  </nav>
</header>
.main-navigation {
  display: flex;
  align-items: flex-start;
}

.site-navigation {
  display: flex;
}`}
      </pre>
      <p>Представим, что пунктов в списке меню стало больше. При проверке на переполнение мы можем продублировать имеющиеся пункты меню. После этого сетка в шапке сломалась.</p>
      <img src="img/flex/grid-15.png" alt="Переполнение шапки пунктами меню" width="800" />
      <p>Поскольку элемент с навигацией по сайту относится к сетке, лучше ограничить его ширину. Но этого будет недостаточно. Меню все равно «уедет» за пределы флекс-контейнера. Дополнительно нужно разрешить перенос элементов на следующую строку. По умолчанию у флекс-контейнера перенос элементов выключен.</p>
      <pre>{`.site-navigation {
  display: flex;
  flex-wrap: wrap;
  width: 620px;
}`}
      </pre>
      <img src="img/flex/grid-16.png" alt="Переполнение шапки пунктами меню" width="800" />
      <p>При этом у самой шапки не должна быть зафиксирована высота, иначе меню «выпадет» за её пределы.</p>
      <p>Дополнительно для флекс-элементов лучше указать отступ снизу, чтобы при переходе на новую строку не происходило «слипание» строк в флекс-контейнере.</p>
      <h3>Случай 3. Изменение текстового контента в элементе сетки</h3>
      <p>Обратимся к примеру с карточками товаров. Ширина карточки товара подстраивается под контент.</p>
      <p>Текст с названием категории товара может стать большим. Сетка при этом «реагирует» следующим образом:</p>
      <img src="img/flex/grid-17.png" alt="Сетка карточек товаров" width="800" />
      <p>В этом случае сетка должна адекватно «среагировать». Для этого мы и фиксируем ширину карточек товара, чтобы подстраховаться от возможного переполнения.</p>
      <pre>{`.catalog-item {
  width: 220px;
  margin-bottom: 20px;
  margin-right: 20px;
}`}
      </pre>
      <p>После установки ширины карточки, сетка возвращается в своё исходное состояние.</p>
      <img src="img/flex/grid-18.png" alt="Сетка карточек товаров" width="800" />
      <p>При этом важно не фиксировать высоту карточки товара, чтобы содержимое карточки товара не «выпало» из своего контейнера.</p>
      <pre>{`.catalog-item {
  width: 220px;
  height: 300px; /* так делать не нужно */
  margin-bottom: 20px;
  margin-right: 20px;
}`}
      </pre>
      <img src="img/flex/grid-19.png" alt="Сетка карточек товаров" width="800" />
      <p>Все известные ошибки собраны энтузиастами в сборнике .<a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="noopener noreferrer">«flexbugs»</a></p>
    </section>
  );
}
export default MethodsForConstructingGridsOnFlexboxes;
