import React from 'react';

function DemoDataBinding() {

  return (
    <section className="conspect">
      <h1>Двустороннее связывание</h1>
      <p>Рассмотрим датабиндинг (или связывание данных) на примере карточки персонажа. От нас требуется реализовать следующую логику: пользователь может ввести имя персонажа, а может сгенерировать случайное нажатием на кнопку. Разметка готова. Нас интересуют поле ввода и кнопка.</p>
      <pre>{`<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title></title>
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <div class="user">
    <div class="user__card">
      <img class="user__pic" src="https://avatars.dicebear.com/api/bottts/keks.svg" width="160" height="160">
      <input class="user__name" type="text" placeholder="Имя персонажа">
      <button class="user__random-name" type="button">Случайное</button>
    </div>
  </div>

  <script src="index.js"></script>
</body>

</html>`}
      </pre>
      <p>Первым делом найдём поле ввода. Затем опишем объект для хранения данных. Геттеры и сеттеры объекта помогут нам реализовать датабиндинг. Помните, что датабиндинг — это подход, а не конкретная реализация. В этом примере можно было реализовать датабиндинг иначе. Например без объекта, только на функциях. Датабиндинг будем реализовывать по частям. Сначала односторонний от данных к представлению: объект data → элемент input. Выступать в роли «вмешательства извне» у нас будет кнопка. Найдём её. Кстати, в реальной практике чаще «вмешательством извне» является сервер или другие пользователи. Для простоты примера по клику на кнопку будем генерировать имя персонажа по маске Пользователь X, где X — число до 1000, полученное случайно. Полученное число будем записывать в объект data. Отобразим записанное значение в консоли браузера, чтобы убедиться, что данные обновляются корректно. И завершим одностороннее связывание, добавив запись нового значения в поле ввода. Нажмите на кнопку «Случайное». В поле ввода подставится случайная строка Пользователь X. В заключение добавим связь от представления к данным, чтобы превратить наше связывание в двустороннее. Для этого навесим обработчик ввода на поле input, в обработчике будет также записывать данные в объект data. Заодно сгенерируем новую аватарку. Всё! Теперь у нас настроено двустороннее связывание. Если по какой-то причине изменятся данные (в нашем случае за это отвечает кнопка «Случайное»), то обновится и представление. Если изменится представление (пользователь введёт новое имя), то обновятся и данные.</p>
      <pre>{`const input = document.querySelector('.user__name');

const data = {
  _value: '',
  get value() {
    return this._value;
  },
  set value(newValue) {
    this._value = newValue;
    input.value = newValue;
  },
};

const button = document.querySelector('.user__random-name');

button.addEventListener(
  'click',
  () => data.value = Пользователь {Math.random().toFixed(3) * 1000},
);

input.addEventListener('input', (evt) => data.value = evt.target.value);`}
      </pre>
    </section>
  );
}
export default DemoDataBinding;
