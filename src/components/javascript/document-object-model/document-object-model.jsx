import React from 'react';

function DocumentObjectModel() {

  return (
    <section className="conspect">
      <h1>Document Object Model</h1>
      <p><abbr data-title="Document Object Model, Объектная Модель Документа">DOM</abbr> – это программный интерфейс <abbr data-title="Application Programming Interface, программный интерфейс приложения">(API)</abbr> для HTML и XML документов. Представление DOM состоит из структурированной группы узлов и объектов, которые имеют свойства и методы. По существу, DOM соединяет веб-страницу с языками описания сценариев либо языками программирования, которые могут изменять содержимое, стиль и структуру документа. По сути это представление HTML документа в виде дерева тегов.</p>
      <p>Стандарты W3C DOM и WHATWG DOM формируют основы DOM, реализованные в большинстве современных браузеров.</p>
      <p><a href="https://developer.mozilla.org/ru/docs/Web/API/Document_Object_Model/Introduction#%D0%B2%D0%B0%D0%B6%D0%BD%D1%8B%D0%B5_%D1%82%D0%B8%D0%BF%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" target="_blank" rel="noopener noreferrer">Важные типы данных</a></p>

      <h2>DOM-интерфейсы (DOM interfaces)</h2>
      <p>Многие объекты реализуют действия из нескольких интерфейсов. Объект таблицы, например, реализует специальный HTML Table Element Interface, который включает такие методы как createCaption и insertRow. Но так как это таблица - это ещё и HTML-элемент, table реализует интерфейс Element, описанный в разделе DOM element Reference. Наконец, так как HTML-элемент (в смысле DOM) - это узел (node) в дереве, которое составляет объектную модель для HTML- или XML-страницы, табличный элемент также реализует более общий интерфейс Node, из которого происходит Element. Когда вы получаете ссылку на объект table, вы обычно используете все три интерфейса этого объекта, вероятно, даже не зная этого.</p>
      <p>Document, window - это объекты, чьи интерфейсы вы, как правило, очень часто используете в программировании DOM. Говоря простыми словами, объект window представляет что-то вроде браузера, а объект document - корень самого документа. Element наследуется от общего интерфейса Node, и эти интерфейсы вместе предоставляют много методов и свойств, которые можно применять у отдельных элементов. Эти элементы также могут иметь отдельные интерфейсы для работы с типами данных, которые эти элементы содержат.</p>

      <h2>DOM и события</h2>
      <pre>{`
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>DOM</title>
</head>
<body>
  <h1>Document Object Model</h1>
  <p>DOM <em>(объектная модель документа)</em> — способ представления разметки страницы
  в виде связанных между собой объектов</p>
  <p>Каждому элементу на странице — тегу, текстовому блоку,
  комментарию — в JS ставится в соответствие объект</p>
  <p>Каждый из объектов знает про свой родительский объект,
  соседние объекты и объекты, расположенные внутри него</p>
  <p>Главный объект, из которого начинают «расти» все остальные
  элементы DOM-дерева — document.</p>
</body>
</html>
`}
      </pre>
      <p>Проблема в том, что браузер понимает HTML, а JavaScript — нет. И чтобы управлять разметкой из JavaScript, например для добавления интерактивности на страницу, нам нужен специальный инструмент. Этим инструментом является DOM.</p>
      <p>Образно выражаясь, DOM следует воспринимать как некий словарь для JavaScript к HTML-разметке веб-страницы. DOM описывает HTML-структуру объектами JS (теми самыми, которые в фигурных скобках). То есть всю нашу страницу можно представить в виде объекта document. В document есть ключ documentElement, который соответствует корневому элементу документа — тегу html. В documentElement лежит head, body и так далее.</p>
      <pre>{`
const document = {
  documentElement: {
      head: { /*...*/ },
      body: {
          h1: { /*...*/ },
          p: { /*...*/ },
          p: { /*...*/ },
          p: { /*...*/ },
      }
  }
}
`}
      </pre>
      <p>И тогда доступ к элементу объекта возможен по ключу. Например, к заголовку h1 по пути document.documentElement.body.h1.</p>
      <p>Следует помнить, что DOM — это не просто точное отражение разметки, а сверхточное, содержащее массу полезных вещей, которые позволяют программисту удобно работать с разметкой.</p>
      <p>К таким удобным инструментам в DOM относятся ссылки для быстрого доступа. Например, чтобы получить доступ к узлу body, не обязательно обращаться document.documentElement.body, а можно сразу — document.body. Так же можно поступить, например, с формами — в ключе document.forms будут собраны все формы на странице. И таких ссылок для быстрого доступа существует множество.</p>
      <p>Однако в DOM присутствуют не только теги. Например, после тега body есть перенос строки и табуляция в 4 пробела.</p>
      <p>С тегом &lt;a&gt; тоже всё непросто. У него заданы атрибуты href и target, а ещё есть содержимое — текст. Поэтому с точки зрения DOM ссылка — это отдельный объект. Кстати, так бывает не всегда. <span className="hl-3">Любой тег может быть представлен как примитив, а может как объект</span>. Потому что DOM экономный.</p>
      <p>Теги образуют узлы-элементы, а текст внутри тега образует текстовый узел. Переносы строки, пробелы и табуляция — всё это полноправные текстовые узлы. Даже комментарий является элементом DOM. И вообще всё, что есть в HTML — есть в DOM. Таким образом, HTML-разметка в веб-странице является основой для формирования первоначального, исходного состояния DOM.</p>
      <p>Вернёмся к примеру со ссылкой. У неё есть адрес, куда она ведёт, и текст. Это как минимум. Помимо этого там может быть набор атрибутов, например «открыться в новом окне» или «не следить за мной» и так далее. Всё это превратится в поля объекта:</p>
      <pre>{`
{
  /*...*/
  a: {
      href: '#',
      target: '_blank',
      textContent: 'Ссылка'
  }
  /*...*/
}
`}
      </pre>

      <h2>DOM дерево</h2>
      <p>DOM дерево перевёрнутое: корень вверху, от корня вниз идут ветки и листья. Каждая часть дерева называется элементом, а в DOM-дереве элемент называется узлом. То есть узел — это абсолютно любой элемент дерева.</p>
      <p>Почти все узлы могут быть одновременно и родителями и детьми. Корень — это узел, у которого есть только потомки, лист — это узел, у которого есть только родитель.</p>
      <p><span className="hl-5">Корень может быть только один.</span></p>
      <p><span className="hl-7">Родитель может быть только один.</span></p>
      <p>У DOM-дерева корень — это document. Узел html не может являться корнем, потому что DOM-дерево содержит, кроме тегов, и отступы, и табуляции, и комментарии и так далее. И на одном уровне с html могут оказаться ещё узлы, а корень может быть только один, поэтому корень — это document.</p>
      <pre>{`
console.log(document.parentElement); // null - у корня не может быть родителей.

console.log(document.children); // html - В свойстве children записаны дочерние элементы узла
`}
      </pre>
      <p>Чтобы узнать имя текущего элемента, нужно обратиться к свойству tagName или nodeName. По соглашению, для HTML-документов имя тега всегда возвращается в верхнем регистре, поэтому важно не забывать приводить к общему написанию с помощью метода строки toLowerCase.</p>
      <p>Скрипт для вывода структуры узла html будет иметь следующий вид:</p>
      <pre>{`
const html = document.html;
for (let i = 0; i < html.children.length; i++) {
    const child = html.children[i];
    console.log(child.tagName.toLowerCase());
    for (let j = 0; j < child.children.length; j++) {
        const innerChild = child.children[j];
        console.log('|---' + innerChild.tagName.toLowerCase());
    }
}
`}
      </pre>
      <p>Скрипт в цикле перебирает все дочерние элементы HTML-узла — html.children. У каждого ребёнка в свою очередь перебирает его дочерние элементы и выводит имена тегов, приведённые к нижнему регистру. Результат будет иметь следующий вид:</p>
      <pre>{`
head
|---meta
body
|---h1
`}
      </pre>

      <h2>А что такое API?</h2>
      <p>API - программный интерфейс приложения, интерфейс прикладного программирования) (англ. application programming interface)</p>
      <p>Это группа методов, которые позволяют взаимодействовать с какой-то частью программы или интерфейса. В случае с DOM API это все методы, которые позволяют что-то делать с DOM-элементами.</p>

      <h2>DOM и разметка</h2>
      <p>Любое изменение, которое мы вносим в DOM не является изменением разметки сайта. DOM может изменяться путём воздействия на него через JavaScript; либо же пользователем, путём взаимодействия с интерфейсом. Рассмотрим на примере: допустим у нас на странице есть форма с двумя флажками, один из которых заранее отмечен:</p>
      <pre>{`
<form>
<label>
    <input type="checkbox" name="someCheckbox" value="1" checked>
    First checkbox
</label>
<label>
    <input type="checkbox" name="someCheckbox" value="2">
    Second checkbox
</label>
</form>`}
      </pre>
      <p>Допустим, пользователь снял отметку с первого чекбокса и поставил во втором:</p>
      <p>При сохранении или отправке формы мы хотим узнать значение чекбокса, который отметил пользователь, для этого мы можем попробовать использовать следующий код, для того, чтобы найти чекбокс с нужным именем и атрибутом checked:</p>
      <pre>{'document.querySelector(input[name="someCheckbox"][checked]).value;'}</pre>
      <p>Однако, это неверно — когда пользователь взаимодействует с разметкой, используя элементы управления, то он изменяет DOM. То же самое мы можем делать из JavaScript. А в селекторе, который используется в коде выше, идёт привязка к разметке и в данной ситуации такой селектор вернёт первое поле ввода, так как только у первого поля ввода в разметке присутствует атрибут checked:</p>
      <p>Чтобы такого не происходило, мы можем использовать псевдоклассы (как в CSS):</p>
      <pre>{'document.querySelector(`input[name="someCheckbox"]:checked`).value;'}</pre>
      <p>Тогда селектор найдёт поле ввода, которое выбрано на данный момент.</p>
      <p>Помните, что любая манипуляция с DOM не меняет разметку. В этом плане ввести в заблуждение могут инструменты разработчика. Если проинспектировать страницу, то во вкладке «Elements» можно увидеть, казалось бы, разметку, Однако на самом деле это DOM, просто браузер помогает нам смотреть на DOM, как на разметку. Чтобы увидеть разметку, нужно из контекстного меню на странице выбрать пункт «View Page Source», Тогда в открывшемся окне мы увидим разметку</p>
      <p>Разметка для DOM — это начальное состояние, то есть то состояние, которое появляется после загрузки страницы. После этого в ход вступают: пользователь, JavaScript, какие-либо сторонние библиотеки, и DOM может измениться и уже не соответствовать разметке.</p>
    </section>
  );
}
export default DocumentObjectModel;
