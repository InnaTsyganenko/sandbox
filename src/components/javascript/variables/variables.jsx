import React from 'react';

function Variables() {

  return (
    <section className="conspect">
      <h1>Переменные</h1>
      <p>Переменная — это область памяти, способ сохранить данные, дав им понятное название.</p>
      <p>Переменную можно представить в виде подписанной коробки. В любую коробку можно что-то поместить, а затем из неё достать. Надпись на коробке (имя переменной) поможет найти нужную, если одинаковых коробок будет много. Переменную можно создать, или объявить, с помощью ключевого слова <span className="hl-7">let (var, const)</span>. За ним следует имя переменной.</p>
      <p>Первый способ существовал с самого появления JavaScript, второй и третий добавлены в спецификацию ECMAScript 2015. Все три способа решают одну и ту же задачу, но отличаются поведением.</p>
      <p>Сейчас при объявлении переменных предпочтение отдается let. Это совершенно не удивительно, потому что оператор let и задумывался как улучшенный вариант var.</p>
      <p>Если объявленной переменной со значением задать новое значение, оно перетрёт старое значение. Это называется переопределением значения переменной.</p>

      <h3>Именование переменных</h3>
      <h4>Самодокументируемый код</h4>
      <p>В настоящее время IT-сообщество придерживается концепции самодокументируемого кода. Это значит, что в самом коде должно содержаться как можно больше информации о том, что он делает. И самый главный принцип самодокументируемого кода — правильное именование переменных.</p>
      <div className="note">
        <p>Foobar или foo — это метапеременная, а также текст-заполнитель, используемый в программировании или в документациях, связанных с программированием. Этот термин используется для наименования переменных, функций или команд, точная идентичность которых не важна и служит только для демонстрации концепции.</p>
        <p><span className="hl-8">What’s Foo? My uncle found this word engraved on the bottom of a jade statue in San Francisco’s China town. The word Foo means Good-Luck. Что такое Фу? Мой дядя нашел это слово, выгравированное на дне нефритовой статуи в китайском городе Сан-Франциско. Слово Foo означает «Удача».</span></p>
        <p>Технари из TRMC клуба в MIT использовали слово «FOO» для обозначения ситуаций когда была необходима аварийная остановка системы. В случае, когда кто-нибудь нажимал один из аварийных выключателей на системном табло вместо времени появлялась надпись «FOO» и поэтому эти выключатели назвали «Foo switches». Позже в этом клубе стали использовать кнопки с подписями «FOO» и «BAR» (уже как дань традиции), и использовались они в самых разных ситуациях.</p>
        <p>Впоследствии это стало использоваться в IT мире как «placeholders», то есть для названия переменных/классов в тех случаях, когда это не важно (например в примерах) или когда на ум ничего лучшего не приходит.</p>
        <p>На русский язык foo переводится как &quot;нечто&quot; или в контексте функции &quot;некая функция&quot;. Это просто название-пример, когда нужно сосредоточиться именно на синтаксисе функции. Вроде &quot;Hello world&quot; для первой программы на изучаемом языке программирования.</p>
      </div>
      <p>Имя переменной может быть почти любым, но не должно начинаться с цифры, а из спецсимволов разрешены только &apos;_&apos; и &apos;$&apos;. Ещё для именования переменных нельзя использовать зарезервированные слова. Имена переменных чувствительны к регистру: header, Header и HEADER — это разные переменные. Никакого транслита.</p>
      <p>Но самое главное — чтобы переменная действительно делала код понятнее, её имя должно описывать то, что в ней хранится.</p>
      <p>В JavaScript принято использовать три стиля оформления:</p>
      <ul>
        <li>camelCase («верблюжий стиль» — слитно, каждое слово, кроме первого, начинается с большой буквы);</li>
        <li>PascalCase («верхний верблюжий стиль» — как предыдущий, но первое слово тоже с большой буквы);</li>
        <li>CONSTANT_CASE («стиль константы» — все буквы большие, слова разделяются символом подчёркивания).</li>
      </ul>
      <p>CONSTANT_CASE, как нетрудно догадаться по названию, используется для именования констант. Константы — это переменные, значение которых известно заранее и не изменяется в ходе выполнения программы.</p>
      <pre>{`
// плохо, константа не названа как константа
const four = 4;

//плохо, не константа названа как константа
const RANDOM_NUMBER = Math.random();

// хорошо
const FOUR = 4;
`}
      </pre>
      <p>PascalCase используется для именования классов, конструкторов и перечислений.</p>
      <pre>{`
  // неправильно
const cat = {
  legCount: 4,
  eyeCount: 2,
  tailCount: 1
}

// правильно
const Cat = {
  LEG_COUNT: 4,
  EYE_COUNT: 2,
  TAIL_COUNT: 1
};
`}
      </pre>
      <p>Во всех остальных случаях используется обычный camelCase.</p>
      <p>Для названий переменных, в которых содержатся значения примитивного типа или объекты, используйте существительные в единственном числе.</p>
      <p>Используйте множественное число, когда речь идёт о наборе из нескольких значений. В частности — о массиве.</p>
      <p>В названии функции обязательно используется глагол. Впрочем, из этого правила есть некоторые исключения. Если функция предназначена для того, чтобы быть обработчиком события, её имя не обязано содержать глагол. Однако тогда оно должно начинаться с on или заканчиваться на handler.</p>

      <h4>Краткость</h4>
      <p>Не следует использовать сокращения никогда. Почти никогда. Исключение — общепринятые сокращения:</p>
      <ul>
        <li>xhr для объектов XMLHttpRequest, evt для объектов Event и его производных (MouseEvent, KeyboardEvent и подобные);</li>
        <li> i, j, k, l, t для счётчиков циклов;</li>
        <li>cb для единственного колбэка в параметрах функции.</li>
      </ul>
      <p>После объявления в переменную нужно записать, или присвоить, какое-то значение:</p>
      <pre>{<code>let variableName = &apos;Я значение переменной!&apos;;</code>}</pre>
      <pre>{<code>let header = document.querySelector(&apos;header&apos;); - cохранять в переменные можно что угодно, в том числе элементы</code>}
      </pre>
      <p>Запомните, вы можете создать или объявить переменную и не сохранять в неё никакие данные.</p>
      <p>Иногда это делают, чтобы «застолбить» имя переменной на будущее.</p>
      <p>Конечно, намного чаще вы будете создавать непустые переменные.</p>
      <p>Для этого нужно помимо объявления переменной присвоить ей какие-то данные.</p>
      <p>Когда в коде встречается переменная, браузер вместо её имени подставляет присвоенное ей значение. Когда мы используем переменную, снова писать let не нужно:</p>
      <pre>{'<code>console.log(header);</code>'}</pre>

      <h2>Область видимости</h2>
      <p>Область видимости переменной — это участок кода, в котором к этой переменной можно обратиться.</p>
      <p>У переменных, объявленных с помощью let и const, область видимости блочная. Это значит, что к ним можно обратиться внутри того же блока кода, где они объявлены, а также внутри дочерних блоков кода.</p>
      <p>Что такое блок кода? Если неформально — это любой участок скрипта, ограниченный фигурными скобками &lbrace; &rbrace;. Исключение — объекты.</p>
      <pre>{`if (true) {
    // Блок кода, который создаёт if
}

for (let i = 0; i < 3; i++) {
    // Блок кода, который создаёт for
    // Кстати, переменная i относится к этому блоку кода,
    // хотя может показаться, что переменная объявлена
    // в круглых скобках до цикла. Таков уж синтаксис for
}

function () {
    // Тело функции — это тоже блок кода
}

{
    // Мы можем создать блок кода просто так,
    // нам не нужны для этого if, for и им подобные конструкции
}`}
      </pre>
      <p>Вернёмся к let и const. Разберём на примере, что такое блочная область видимости.</p>
      <pre>{`{
    const message = 'Hello world!';
    // К переменной можно обратиться в этом же блоке
    console.log(message);
    {
        // К переменной можно обратиться в дочернем блоке
        console.log(message);
    }
}

// К переменной нельзя обратиться вне блока,
// в котором она была объявлена.
// Получим ошибку обращения (ReferenceError)
console.log(message);

{
    // К переменной нельзя обратиться вне блока, в котором она была объявлена.
    // В том числе в «соседнем» блоке.
    // Получим ошибку обращения (ReferenceError)
    console.log(message);
}`}
      </pre>
      <p>У переменной, объявленной с помощью var — «функциональная» область видимости. Иными словами видимость такой переменной не ограничивают никакие блоки кода, кроме блока тела функции.</p>
      <p>Чтобы ограничить var-переменную, её нужно объявить внутри функции. У var есть ещё несколько существенных минусов. Возможность несколько раз объявить переменную с одним и тем же именем:</p>
      <pre>{`
var name = 'Keks';
var name = 'Rex';
console.log(name);  // Выведет: Rex
Другой минус — возможность использовать переменную до объявления (такое поведение называется hoisting — поднятие, англ.):

console.log(x); // Выведет: undefined
x = 1;
console.log(x) // Выведет: 1
var x;
`}
      </pre>
      <p>Кажется, что объявление var «мощнее», чем let и const, потому что ему никакие блоки не указ, кроме тела функции. Однако, на практике разработчики хотят максимально ограничить область видимости переменных. Чем меньше область видимости, тем проще анализировать программу. Меньше шансов допустить ошибку.</p>
      <p>Прозвучит парадоксально, но переменная, объявленная с помощью const, это ещё не обязательно константа. Константами называются переменные, значение которых известно ещё до выполнения программы, и их значение не изменяется в ходе выполнения программы.</p>
      <p>Объявление переменной с помощью const обеспечивает только одно из этих двух условий — неизменяемость. Чтобы в коде отличать константы от неизменяемых переменных, первые именуют в CONSTANT_CASE.</p>
      <pre>{`
// Настоящая константа
const EARTH_RADIUS = 6371;

// Просто неизменяемая переменная
const randomNumber = Math.random();
`}
      </pre>
      <p>В чём отличие var, let и const?</p>
      <ul>
        <li>Переменные, объявленные при помощи var, имеют глобальную или локальную (в рамках функции) область видимости. Если вы объявляете переменные с использованием let или const, их область видимости будет блочной.</li>
        <li>При помощи var или let можно объявлять переменные без их инициализации, но если вы объявляете переменную при помощи const, она должна инициализироваться при объявлении.</li>
        <li>Переменные, объявленные при помощи var, могут обновляться и объявляться заново. Использование let позволяет обновлять переменную, но не объявлять заново, а использование const не предполагает ни того, ни другого.</li>
        <li>Переменные всех видов поднимаются в верх своей области видимости. Но переменные, объявленные при помощи var, инициализируются как undefined, а объявленные с использованием let или const — не инициализируются.</li>
      </ul>
      <p>Используйте const по умолчанию. Если значение переменной изменится, возникнет ошибка, в этом случае можно будет заменить объявление на let.</p>
    </section>
  );
}
export default Variables;
