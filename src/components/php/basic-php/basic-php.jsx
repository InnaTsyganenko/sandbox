import React from 'react';

function BasicPHP() {

  return (
    <section className="conspect">
      <h1><abbr data-title="Personal Home Page">PHP</abbr></h1>
      <h2>Зачем нужен PHP</h2>
      <p><abbr data-title="Personal Home Page">PHP</abbr> придумали в 1995 году.</p>
      <p>Это был набор скриптов для личной страницы одного программиста из Дании, но в итоге проект разросся так, что получил собственный синтаксис, поддержку дополнительных модулей, признание в среде разработчиков и превратился в один из самых популярных языков программирования в мире.</p>

      <h3>Для чего используется PHP: формирование страниц «на лету»</h3>
      <p>Предположим, у нас есть библиотека с тысячей книг, и мы хотим сделать для неё сайт. Любое изменение структуры или информации на страницах потребует изменений во всех созданных файлах.</p>
      <p>С помощью PHP мы можем создать одну страницу и показывать на ней информацию о той книге, которая нам нужна прямо сейчас. Такой способ называется <span className="hl-9">динамическим формированием страниц на бэкенде</span>.</p>
      <p><span className="hl-6">Бэкенд (back-end)</span>— это часть сайта, которая находится на сервере, получает запрос от браузера, выполняет запрошенные действия и отправляет информацию обратно. Такой подход применяется повсеместно в клиент-серверном программном обеспечении, и PHP тоже может решать такие задачи. Язык прекрасно справляется с ролью бэкенда для мобильных, десктопных или веб-приложений.</p>

      <h3>Как формируются страницы</h3>
      <p>PHP как раз нужен для динамического формирования страниц на основе информации из базы данных.</p>
      <p>Представим, что информация о нашей тысяче книг хранится в базе данных. Тогда мы можем легко сформировать страницу конкретной книги (допустим, мы ищем «Тёмную башню» Стивена Кинга).</p>
      <ol>
        <li>Мы пишем в поиске на сайте «Тёмная башня» и отправляем запрос на сервер. PHP получает запрос, соединяется с базой данных и находит нужную информацию.</li>
        <li>Полученную информацию PHP может обработать до нужного формата. Например, добавить теги или преобразовать в другой вид.</li>
        <li>PHP вставляет обложку, автора и описание книги в заранее подготовленный шаблон страницы. Шаблон — это почти полностью готовая страница или часть страницы, на которой не хватает только данных из базы. После того, как информация добавлена в шаблон, у нас есть полностью готовый код страниц.</li>
        <li>Этот код отправляется в браузер, и пользователь видит страницу с информацией о «Тёмной башне».</li>
      </ol>
      <p>Для пользователя страница будет выглядеть как обычно, но с точки зрения PHP — это динамически сформированная страница на основе шаблона. Если нам потребуется что-нибудь поменять: добавить блок информации, изменить вёрстку или отобразить ещё что-то из информации о книге, нужно будет изменить не тысячу файлов, а один, с шаблоном страницы. И когда мы будем заходить на сайт, все изменения сразу будут видны на всех страницах.</p>

      <h3>Управление контентом на странице</h3>
      <p>Всю информацию в базе данных мы можем менять без изменения сайта — поэтому, например, созданием сайта может заниматься один человек, а наполнением — другой, даже без навыков программирования.</p>
      <p>Поэтому PHP хорошо подходит для создания систем управления контентом (CMS), интернет-магазинов и всевозможных интернет-сервисов. В основе практически любого сервиса лежит принцип формирования динамических страниц: например, каталога товаров или статьи в блоге.</p>
      <p>Чтобы быстро создать новый сайт на PHP, не нужно программировать его с нуля. Можно использовать одну из систем, которая основана на PHP, и позволяет легко редактировать содержимое без программирования. Например, проект Wordpress помогает при создании блогов, персональных сайтов и даже небольших интернет-магазинов. Для всего перечисленного там уже есть готовые шаблоны, которые нужно только заполнить контентом. При этом Wordpress — лишь один из немногих успешных инструментов.</p>

      <h3>Разработка сервисов</h3>
      <p>У PHP есть модули для лёгкой работы с базами данных, электронной почтой, службами каталогов и многими другими технологиями. Благодаря этому возможно создавать сервисы без привязки к вебу — например, для работы с данными внутри организации. Сервис, позволяющий получить информацию о сотрудниках из корпоративной базы данных — пустяковая задача для PHP.</p>
      <p>Другая сильная сторона PHP — автоматизация действий. PHP работает на стороне сервера, и на нём можно разрабатывать различные сценарии для автоматизации: делать резервные копии информации, собирать и доставлять проекты на рабочий сервер, создавать и редактировать пользователей и т.д. Эти сценарии работают прямо из командной строки, без необходимости создавать графический интерфейс.</p>

      <h2>Основы PHP</h2>
      <p>PHP — препроцессорный язык. Он может собирать страницы из кусочков, как конструктор. PHP превращает код собранных страниц в HTML. Это и есть препроцессинг.</p>

      <h3>Комментарии</h3>
      <pre>{`// Я — текст в комментарии, я не влияю на программу,
  // как и код ниже
  // require('путь_к_файлу.php');`}
      </pre>

      <h3>Команды</h3>
      <p>Команда require добавляет код из указанного файла на страницу, где используется require:</p>
      <pre>{'require(&apos;путь_до_файла.php&apos;);'}</pre>
      <p>Напишем открывающий и закрывающий PHP-тег и добавим подключение компонента шапки components/header.php с помощью require. Компонентом называется файл с кодом какого-то смыслового раздела страницы. Например, у нас есть компонент шапки, подвала, контента страницы.</p>
      <p>В PHP есть и другие команды для подключения файлов. Например, include.</p>
      <p>Каждую команду нужно писать с новой строки, а в конце ставить точку с запятой - ;</p>

      <h3>Склеивание файлов</h3>
      <p>При добавлении файлов в PHP происходит склеивание. Когда по ходу выполнения сценария встречается команда require, она заменяется на содержимое подключаемого файла, ровно в том порядке, в каком расположены require.</p>
      <pre>{`require('header.php');
  require('content.php');
  require('footer.php');`}
      </pre>
      <p>В примере к разметке шапки добавится разметка контента, а к ним разметка подвала.</p>

      <h3>PHP-теги</h3>
      <p>Чтобы появилась новая страница, нужно создать сценарий. Сценарий — набор команд для решения задачи. Например, сценарий index.php собирает главную страницу магазина с помощью require.</p>
      <p>Чтобы сделать новый сценарий, надо создать файл и дать ему название. Затем открыть файл в мини-браузере, чтобы видеть результат работы сценария. После этого можно писать код. Файл для каталога уже создан, он называется catalog.php.</p>
      <p>Чтобы PHP-код работал, он должен находиться внутри PHP-тегов:</p>
      <pre>{`<?php // Открывающий PHP-тег
  // Какой-то PHP-код
  ?>    // Закрывающий PHP-тег`}
      </pre>
      <p>Теги работают, как сигнал. С их помощью мы как будто говорим «обратите внимание, внутри PHP-код».</p>
      <p>Иногда закрывающий тег можно опустить. Например, когда мы работаем со сценарием, где есть только PHP-код. Если мы внедряем фрагмент PHP в HTML, то закрывающий тег нужно использовать обязательно. Так мы обозначаем границы PHP-кода внутри шаблона.</p>

      <h3>Переменные</h3>
      <p>Переменная — способ сохранить информацию под определённым именем. Объявление переменной — написание имени переменной, первое её упоминание. Запись информации в переменную называется присваиванием значения.</p>
      <pre>{`$name = 'Семён';
  // Объявили переменную $name
  // Присвоили переменной значение 'Семён'`}
      </pre>
      <p>Имя переменной должно начинаться со знака доллара $, дальше может идти буква или символ подчёркивания. Название должно быть понятным для людей и описывать то, что находится в переменной.</p>

      <h3>Шаблоны</h3>
      <p>В шаблонах страницы хранят заготовки кода. Шаблон может быть статичным или динамичным, то есть включать в себя изменяемые данные.</p>

      <h3>Добавление PHP в разметку</h3>
      <p>Сначала добавим фрагмент PHP-кода в шаблон, для этого будем использовать теги &lt;?php и ?&gt;. При добавлении PHP в шаблон, нужно обязательно использовать закрывающий PHP-тег. Так мы обозначим границы PHP-кода.</p>
      <p>Затем выведем значение переменной на страницу в браузере. Для этого можно использовать команду echo. В круглых скобках после названия команды укажем имя переменной.</p>
      <p>Но как значение переменной попадает в шаблон? Мы объявили переменную в основном сценарии product.php, а после этого подключили шаблон components/product_info.php. Из-за склеивания файлов переменные из сценария видно в шаблоне. Если значение переменной будет меняться, изменится и значение на странице. Вот она, суперсила PHP!</p>
      <pre>{`// Полная запись
  <p><?php echo($name); ?></p>

  // Короткая запись
  <p><?= $name ?></p>`}
      </pre>
      <p>Работают эти два варианта одинаково. Разница только в количестве символов.</p>

      <h3>База данных</h3>
      <p>База данных — сложная система, которая хранит информацию сайта в организованном виде. В БД заносим данные, а прописанный сценарий формирует страницу с нужной информацией из БД.</p>

      <h3>Работа с адресом</h3>
      <p>Адресная строка — специальное поле в браузере, в котором написаны адреса страниц в интернете. В адресе есть специальная часть, которая называется «параметры запроса». Параметры запроса располагаются после знака вопроса.</p>
      <pre>{'https://www.gloevk.ru/product.php?product_id=1'}</pre>
      <p>С помощью команды $_GET можно получить информацию из адреса. Чтобы получить значение product_id с помощью $_GET, нужно написать $_GET&lsqb;&apos;product_id&apos;&rsqb;.</p>
      <pre>{`$id;          // Создаём переменную
  $id = 1;      // Сохраняем артикул в переменную
  keks_log($id) // Передаём переменную в команду`}
      </pre>
    </section>
  );
}
export default BasicPHP;
