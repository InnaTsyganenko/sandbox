import React from 'react';

function DevtoolsChrome() {

  return (
    <section className="conspect">
      <h1>Работа с DevTools</h1>
      <h2>Вкладки</h2>
      <h5 className="note"><a href="https://habr.com/ru/post/254007/" target="_blank" rel="noopener noreferrer">15 советов и хитростей инструментов разработчика Chrome, которые вы обязаны знать</a></h5>
      <p><b>Console</b> - отображается информация об ошибках в коде, а ещё туда можно ввести команду, и она выполнится. Если на странице не подгрузились шрифты, картинки или стили, то сообщения об ошибках выводятся именно сюда. Справа в верхнем углу DevTools выведутся иконки-предупреждения, которые откроют окно консоли.</p>
      <p><b>Sources</b> - показывает все подключенные к странице ресурсы. Чаще всего эта вкладка используется при отладке кода. Чтобы посмотреть файл в более привычном виде, нажмите на иконку с фигурными скобками внизу окна.</p>
      <p><b>Network</b> - С её помощью можно выяснить, сколько времени заняла загрузка страницы, какие ресурсы подключились или не подключились к странице, и многое другое. При первом открытии вкладка может оказаться пустой — тогда просто перезагрузите страницу. После перезагрузки внизу появится таблица всех ресурсов, подключенных к странице, и данные о них. Здесь можно узнать тип запроса, который был отправлен для получения ресурса, статус ответа, размер ресурса и многое другое.</p>
      <p>Обычно вкладку Network используют, чтобы узнать состояние ресурса, который не отображается на странице, но был к ней подключен. Смотрим в таблицу — если есть какая-то ошибка, ресурс будет гореть красным. Если ошибок нет, то статус каждого запроса — 200. Это значит, что всё хорошо.</p>
      <p>Если нажать кнопку фильтра, появится возможность посмотреть, как загружаются определенные ресурсы — например, картинки или шрифты.</p>
      <p>В левом нижнем углу — информация о количестве запросов, трафике и времени загрузки. Ещё мы можем выбрать скорость соединения и проверить, как сайт работает на мобильном где-нибудь за городом.</p>

      <h3>Проверка вёрстки на мобильных</h3>
      <p>Легко проверить, как выглядит вёрстка на мобильных. Заходим в режим эмуляции - Toggle device toolbar в левом углу или нажмите комбинацию Ctrl+Shift+M — можем поменять ширину экрана, выбрать конкретный девайс (например, айфон), просмотреть все media-выражения, примененные к странице, или выбрать плотность пикселей, чтобы проверить ретиновую графику. Это незаменимый инструмент в работе над адаптивной вёрсткой.</p>
      <p>На этой же панели есть еще одна полезная кнопка — DPR (Device Pixel Ratio). С её помощью проверяют, как выглядят изображения на ретина-дисплеях — экранах с повышенной плотностью. Чтобы посмотреть, как выглядит графика на разных устройствах, измените значение DPR и обновите страницу.</p>

      <h3>Скриншоты страниц</h3>
      <p>Заходим в режим эмуляции и в выпадающем меню выбираем «сделать скриншот» — изображение сразу сохраняется на компьютер. Также есть возможность сделать скриншот всей страницы целиком — для этого выберите пункт Capture full size screenshot.</p>
      <p><b>Elements</b> - просмотр элементов DOM, изменение стилей.</p>
      <p>В разделе Styles также можно проверять, задавать и исправлять стилевые правила для :hover, :active, :focus и других псевдоклассов. Чтобы это сделать, выберите элемент, которому задано интерактивное состояние. Затем в разделе Styles нажмите на кнопку : hov, выберите подходящий псевдокласс и управляйте его стилями.</p>

      <h3>Как использовать точки останова</h3>
      <p>Для начала откройте вкладку Sources и выберите файл со скриптом. Затем кликните по номеру строки, на которой вы хотите приостановить выполнение кода. Выбранные точки сразу появятся на панели справа в разделе Breakpoints.</p>
      <p>Также можно пойти другим путём: кликните на Event Listener Breakpoints и выберите события, на которых нужно приостановить выполнение кода.</p>
      <p>JavaScript выполняется последовательно. Когда Chrome дойдет до точек останова, он остановит выполнение скрипта, и вы сможете отследить, что происходит с кодом. Например, посмотреть значения переменных или разобраться с логикой функций. С этого момента только вы управляете кодом. Можете перейти к следующей точке, шагнуть внутрь функции или отключить точки останова. В этом вам помогут кнопки на панели справа. Для чего они нужны, пойдем по порядку:</p>
      <ul>
        <li><b>Resume Script Execution</b> — продолжает выполнение скрипта до следующей точки останова. Горячая клавиша F8.</li>
        <li><b>Step over next function call</b> — выполняет строку кода и переходит к следующей функции. Горячая клавиша F10.</li>
        <li><b>Step into next call function call</b> — выполняет строку кода и затем ныряет внутрь функции — на первую строку. Горячая клавиша F11.</li>
        <li><b>Step out of current function</b> — выполняет до конца текущую функцию и останавливается на её последней строке. Горячая клавиша Shift + F11.</li>
        <li><b>Step</b> — по принципу действия похожа на Step into of current function. Но если Step into нужен для того, чтобы попасть внутрь функции, то Step просто выполнит её и покажет результат. Горячая клавиша F9.</li>
        <li><b>Deactivate breakpoints</b> — отключает точки останова. Горячая клавиша Ctrl + F8.</li>
        <li><b>Pause on exceptions</b> — выполнение JavaScript приостанавливается, когда появляется какое-то исключение.</li>
      </ul>
      <p>Lighthouse оценивает классические сайты по четырём критериям: производительность, лучшие практики, SEO и доступность. Для сайтов, выполненных по технологии PWA (прогрессивные веб-приложения), добавляется пятый критерий — progressive web app.</p>
      <p><b></b></p>
      <p></p>
      <h2>Как посмотреть обработчики на элементе</h2>
      <p>Для просмотра текущих обработчиков событий на элементе нужно выбрать элемент во вкладке Elements и открыть секцию Event Listeners в боковой панели справа.</p>
      <p>У каждого обработчика указаны:</p>
      <p>Место и строка в коде, где он был добавлен.</p>
      <p>Опции обработчика событий, подробнее <a href="https://developer.mozilla.org/ru/docs/Web/API/EventTarget/addEventListener#%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B" target="blank">об опциях на MDN</a>.</p>
      <p>Колбэк-функция обработчика.</p>
      <h3>Элементы управления</h3>
      <p>Кнопка Refresh. Нужна для обновления списка обработчиков событий. Список не обновляется автоматически после добавления нового обработчика, обновлять нужно вручную.</p>
      <p>Чекбокс Ancestors. Когда флажок снят, отображаются только обработчики для текущего выбранного узла. Когда флажок Ancestors включён, вместе с обработчиком текущего выбранного узла отображаются обработчики событий родителей этого узла.</p>
      <p>Фильтры.</p>
      <ul>
        <li>Passive — показывать только обработчики событий, которым передана опция <pre>{'{passive: true}'}</pre>.</li>
        <li>Blocking — показывать все обработчики, кроме пассивных.</li>
        <li>All — показывать все обработчики.</li>
      </ul>
      <p>Чекбокс Framework listeners. Некоторые фреймворки и библиотеки JavaScript оборачивают события DOM в свои пользовательские API событий. В прошлом это затрудняло проверку обработчиков событий с помощью DevTools, потому что определение функции ссылалось на код фреймворка или библиотеки, а не на место использования. Опция Framework listeners решает эту проблему.</p>

      <h2>Шаблоны и данные</h2>
      <p>Шаблон — некоторая оболочка для данных, разметка, любой способ отобразить информацию. Шаблон никогда не несёт содержательной информации.</p>
      <p>Данные — информация, которую вводит пользователь, присылает сервер или которая может быть сгенерирована компьютером.</p>
      <p>Данные не должны повторять шаблон, они должны описывать параметры сущностей, которыми мы оперируем. Простой способ отделить шаблон от данных — попробовать изменить одно или другое.</p>
      <p>Например, использовать иной способ отображения данных (отобразить товары в линейку вместо списка) или изменить отображаемую информацию (описать не утюг, а пылесос). Допустим у нас есть структура, описывающая логотип:</p>
      <pre>{`const header = {
logo: {
    src: 'logo.png',
    width: 100,
    height: 30
}
};`}
      </pre>
      <p>С первого взгляда можно подумать, что это данные, однако такую информацию неправильно хранить как данные. Эта информация описывает логотип, расположенный в шапке, она не приходит с сервера, не вводится пользователем, возможно, эта информация никогда не поменяется. Поэтому данная информация не является данными — это шаблон, который описывает, как некоторая сущность должна выглядеть. Данными могут быть: название компании, адрес, телефон и тому подобное.</p>

      <h3>Зачем отделять данные и шаблоны</h3>
      <p>Допустим, что у нас есть список некоторых продуктов интернет-магазина:</p>
      <pre>{`const products = [
{name: 'Утюг'},
{name: 'Чайник'},
{name: 'Пылесос'},
{name: 'Стиральная машина'},
{name: 'Кухонный комбайн'},
{name: 'Автомобиль'}
];`}
      </pre>
      <p>Дизайнер говорит нам, что в интерфейсе мы должны для некоторых пользователей показывать товары списком, а для других (кто хочет) сеткой. Неужели нам придётся заводить два одинаковых списка продуктов? Нет! Как раз список продуктов, приведённый выше, является данными, а способы показа товаров являются шаблоном.</p>
      <p>Данные не должны меняться в зависимости от того, каким образом они должны отображаться. Шаблон отвечает за то, куда вставить данные — в элемент списка или элемент сетки.</p>

      <h3>Создание DOM элементов</h3>
      <p>В условиях использования JavaScript DOM-элемент является шаблоном. DOM-элементы можно создать несколькими способами:</p>
      <ul>
        <li>На основе разметки — в специальные места разметки в тексте разметки подставляются данные;</li>
        <li>На основе строк;</li>
        <li>Компилируемые шаблоны — использование сторонних библиотек, способных переводить некоторый язык в разметку;</li>
        <li>На основе DOM-API:
          <ul>
            <li>На основе шаблонного элемента (template из WebComponents);</li>
            <li>С помощью обёрток над шаблонами (Incremental DOM).</li>
          </ul>
        </li>
      </ul>
      <p>Простой способ отделить шаблон от данных — попробовать заменить их: изменить способ отображения данных или отображаемую информацию.</p>
    </section>

  );
}
export default DevtoolsChrome;
